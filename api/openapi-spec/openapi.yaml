openapi: 3.0.1
info:
  title: Api
  version: unversioned
servers:
- url: /
paths:
  /apis/:
    get:
      tags:
      - apis
      description: get available API versions
      operationId: getAPIVersions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList'
  /apis/management.loft.sh/:
    get:
      tags:
      - managementLoftSh
      description: get information of a group
      operationId: getManagementLoftShAPIGroup
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
  /apis/management.loft.sh/v1/:
    get:
      tags:
      - managementLoftSh_v1
      description: get available resources
      operationId: getManagementLoftShV1APIResources
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
  /apis/management.loft.sh/v1/announcements:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind Announcement
      operationId: listManagementLoftShV1Announcement
      parameters:
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AnnouncementList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AnnouncementList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AnnouncementList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Announcement
        version: v1
  /apis/management.loft.sh/v1/apps:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind App
      operationId: listManagementLoftShV1App
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AppList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AppList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AppList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: App
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create an App
      operationId: createManagementLoftShV1App
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: App
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete collection of App
      operationId: deleteManagementLoftShV1CollectionApp
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: App
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/apps/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified App
      operationId: readManagementLoftShV1App
      parameters:
      - name: name
        in: path
        description: name of the App
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: App
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified App
      operationId: replaceManagementLoftShV1App
      parameters:
      - name: name
        in: path
        description: name of the App
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: App
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete an App
      operationId: deleteManagementLoftShV1App
      parameters:
      - name: name
        in: path
        description: name of the App
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: App
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified App
      operationId: patchManagementLoftShV1App
      parameters:
      - name: name
        in: path
        description: name of the App
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: App
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusteraccesses:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind ClusterAccess
      operationId: listManagementLoftShV1ClusterAccess
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccessList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccessList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccessList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccess
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create a ClusterAccess
      operationId: createManagementLoftShV1ClusterAccess
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccess
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete collection of ClusterAccess
      operationId: deleteManagementLoftShV1CollectionClusterAccess
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccess
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusteraccesses/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified ClusterAccess
      operationId: readManagementLoftShV1ClusterAccess
      parameters:
      - name: name
        in: path
        description: name of the ClusterAccess
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccess
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified ClusterAccess
      operationId: replaceManagementLoftShV1ClusterAccess
      parameters:
      - name: name
        in: path
        description: name of the ClusterAccess
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccess
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete a ClusterAccess
      operationId: deleteManagementLoftShV1ClusterAccess
      parameters:
      - name: name
        in: path
        description: name of the ClusterAccess
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccess
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified ClusterAccess
      operationId: patchManagementLoftShV1ClusterAccess
      parameters:
      - name: name
        in: path
        description: name of the ClusterAccess
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccess
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusteraccounttemplates:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind ClusterAccountTemplate
      operationId: listManagementLoftShV1ClusterAccountTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplateList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplateList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplateList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccountTemplate
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create a ClusterAccountTemplate
      operationId: createManagementLoftShV1ClusterAccountTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccountTemplate
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete collection of ClusterAccountTemplate
      operationId: deleteManagementLoftShV1CollectionClusterAccountTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccountTemplate
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusteraccounttemplates/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified ClusterAccountTemplate
      operationId: readManagementLoftShV1ClusterAccountTemplate
      parameters:
      - name: name
        in: path
        description: name of the ClusterAccountTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccountTemplate
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified ClusterAccountTemplate
      operationId: replaceManagementLoftShV1ClusterAccountTemplate
      parameters:
      - name: name
        in: path
        description: name of the ClusterAccountTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccountTemplate
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete a ClusterAccountTemplate
      operationId: deleteManagementLoftShV1ClusterAccountTemplate
      parameters:
      - name: name
        in: path
        description: name of the ClusterAccountTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccountTemplate
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified ClusterAccountTemplate
      operationId: patchManagementLoftShV1ClusterAccountTemplate
      parameters:
      - name: name
        in: path
        description: name of the ClusterAccountTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterAccountTemplate
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusterconnect:
    post:
      tags:
      - managementLoftSh_v1
      description: create a ClusterConnect
      operationId: createManagementLoftShV1ClusterConnect
      parameters:
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnect'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnect'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnect'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnect'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnect'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnect'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnect'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterConnect
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusterroletemplates:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind ClusterRoleTemplate
      operationId: listManagementLoftShV1ClusterRoleTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplateList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplateList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplateList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterRoleTemplate
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create a ClusterRoleTemplate
      operationId: createManagementLoftShV1ClusterRoleTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterRoleTemplate
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete collection of ClusterRoleTemplate
      operationId: deleteManagementLoftShV1CollectionClusterRoleTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterRoleTemplate
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusterroletemplates/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified ClusterRoleTemplate
      operationId: readManagementLoftShV1ClusterRoleTemplate
      parameters:
      - name: name
        in: path
        description: name of the ClusterRoleTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterRoleTemplate
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified ClusterRoleTemplate
      operationId: replaceManagementLoftShV1ClusterRoleTemplate
      parameters:
      - name: name
        in: path
        description: name of the ClusterRoleTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterRoleTemplate
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete a ClusterRoleTemplate
      operationId: deleteManagementLoftShV1ClusterRoleTemplate
      parameters:
      - name: name
        in: path
        description: name of the ClusterRoleTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterRoleTemplate
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified ClusterRoleTemplate
      operationId: patchManagementLoftShV1ClusterRoleTemplate
      parameters:
      - name: name
        in: path
        description: name of the ClusterRoleTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterRoleTemplate
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusters:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind Cluster
      operationId: listManagementLoftShV1Cluster
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Cluster
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create a Cluster
      operationId: createManagementLoftShV1Cluster
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Cluster
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete collection of Cluster
      operationId: deleteManagementLoftShV1CollectionCluster
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Cluster
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusters/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified Cluster
      operationId: readManagementLoftShV1Cluster
      parameters:
      - name: name
        in: path
        description: name of the Cluster
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Cluster
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified Cluster
      operationId: replaceManagementLoftShV1Cluster
      parameters:
      - name: name
        in: path
        description: name of the Cluster
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Cluster
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete a Cluster
      operationId: deleteManagementLoftShV1Cluster
      parameters:
      - name: name
        in: path
        description: name of the Cluster
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Cluster
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified Cluster
      operationId: patchManagementLoftShV1Cluster
      parameters:
      - name: name
        in: path
        description: name of the Cluster
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Cluster
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusters/{name}/charts:
    get:
      tags:
      - managementLoftSh_v1
      description: read charts of the specified Cluster
      operationId: readManagementLoftShV1ClusterCharts
      parameters:
      - name: name
        in: path
        description: name of the ClusterCharts
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterCharts'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterCharts'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterCharts
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create charts of a Cluster
      operationId: createManagementLoftShV1ClusterCharts
      parameters:
      - name: name
        in: path
        description: name of the ClusterCharts
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterCharts'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterCharts'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterCharts'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterCharts'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterCharts'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterCharts'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterCharts'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterCharts
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusters/{name}/domain:
    get:
      tags:
      - managementLoftSh_v1
      description: read domain of the specified Cluster
      operationId: readManagementLoftShV1ClusterDomain
      parameters:
      - name: name
        in: path
        description: name of the ClusterDomain
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterDomain'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterDomain'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterDomain
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create domain of a Cluster
      operationId: createManagementLoftShV1ClusterDomain
      parameters:
      - name: name
        in: path
        description: name of the ClusterDomain
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterDomain'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterDomain'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterDomain'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterDomain'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterDomain'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterDomain'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterDomain'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterDomain
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusters/{name}/memberaccess:
    get:
      tags:
      - managementLoftSh_v1
      description: read memberaccess of the specified Cluster
      operationId: readManagementLoftShV1ClusterMemberaccess
      parameters:
      - name: name
        in: path
        description: name of the ClusterMemberAccess
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterMemberAccess'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterMemberAccess'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterMemberAccess
        version: v1
  /apis/management.loft.sh/v1/clusters/{name}/members:
    get:
      tags:
      - managementLoftSh_v1
      description: read members of the specified Cluster
      operationId: readManagementLoftShV1ClusterMembers
      parameters:
      - name: name
        in: path
        description: name of the ClusterMembers
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterMembers'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterMembers'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterMembers
        version: v1
  /apis/management.loft.sh/v1/clusters/{name}/reset:
    post:
      tags:
      - managementLoftSh_v1
      description: create reset of a Cluster
      operationId: createManagementLoftShV1ClusterReset
      parameters:
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      - name: name
        in: path
        description: name of the ClusterReset
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterReset'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterReset'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterReset'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterReset'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterReset'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterReset'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterReset'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterReset
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/clusters/{name}/virtualclusterdefaults:
    get:
      tags:
      - managementLoftSh_v1
      description: read virtualclusterdefaults of the specified Cluster
      operationId: readManagementLoftShV1ClusterVirtualclusterdefaults
      parameters:
      - name: name
        in: path
        description: name of the ClusterVirtualClusterDefaults
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterVirtualClusterDefaults'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterVirtualClusterDefaults'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ClusterVirtualClusterDefaults
        version: v1
  /apis/management.loft.sh/v1/configs:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind Config
      operationId: listManagementLoftShV1Config
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ConfigList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ConfigList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ConfigList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Config
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create a Config
      operationId: createManagementLoftShV1Config
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Config'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Config'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Config'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Config'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Config'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Config'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Config'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Config
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/configs/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified Config
      operationId: readManagementLoftShV1Config
      parameters:
      - name: name
        in: path
        description: name of the Config
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Config'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Config'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Config
        version: v1
  /apis/management.loft.sh/v1/directclusterendpointtokens:
    post:
      tags:
      - managementLoftSh_v1
      description: create a DirectClusterEndpointToken
      operationId: createManagementLoftShV1DirectClusterEndpointToken
      parameters:
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointToken'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointToken'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointToken'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointToken'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointToken'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointToken'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointToken'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: DirectClusterEndpointToken
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/events:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind Event
      operationId: listManagementLoftShV1Event
      parameters:
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.EventList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.EventList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.EventList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Event
        version: v1
  /apis/management.loft.sh/v1/features:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind Feature
      operationId: listManagementLoftShV1Feature
      parameters:
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.FeatureList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.FeatureList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.FeatureList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Feature
        version: v1
  /apis/management.loft.sh/v1/features/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified Feature
      operationId: readManagementLoftShV1Feature
      parameters:
      - name: name
        in: path
        description: name of the Feature
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Feature'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Feature'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Feature
        version: v1
  /apis/management.loft.sh/v1/kiosk/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified Kiosk
      operationId: readManagementLoftShV1Kiosk
      parameters:
      - name: name
        in: path
        description: name of the Kiosk
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Kiosk'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Kiosk'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Kiosk
        version: v1
  /apis/management.loft.sh/v1/licenses:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind License
      operationId: listManagementLoftShV1License
      parameters:
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: License
        version: v1
  /apis/management.loft.sh/v1/licenses/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified License
      operationId: readManagementLoftShV1License
      parameters:
      - name: name
        in: path
        description: name of the License
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.License'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.License'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: License
        version: v1
  /apis/management.loft.sh/v1/licensetokens:
    post:
      tags:
      - managementLoftSh_v1
      description: create a LicenseToken
      operationId: createManagementLoftShV1LicenseToken
      parameters:
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseToken'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseToken'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseToken'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseToken'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseToken'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseToken'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseToken'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: LicenseToken
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/loftupgrades:
    post:
      tags:
      - managementLoftSh_v1
      description: create a LoftUpgrade
      operationId: createManagementLoftShV1LoftUpgrade
      parameters:
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgrade'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgrade'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgrade'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgrade'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgrade'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgrade'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgrade'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: LoftUpgrade
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/namespaces/{namespace}/sharedsecrets:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind SharedSecret
      operationId: listManagementLoftShV1NamespacedSharedSecret
      parameters:
      - name: namespace
        in: path
        description: object name and auth scope, such as for teams and projects
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecretList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecretList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecretList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SharedSecret
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create a SharedSecret
      operationId: createManagementLoftShV1NamespacedSharedSecret
      parameters:
      - name: namespace
        in: path
        description: object name and auth scope, such as for teams and projects
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SharedSecret
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/namespaces/{namespace}/sharedsecrets/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified SharedSecret
      operationId: readManagementLoftShV1NamespacedSharedSecret
      parameters:
      - name: name
        in: path
        description: name of the SharedSecret
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: object name and auth scope, such as for teams and projects
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SharedSecret
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified SharedSecret
      operationId: replaceManagementLoftShV1NamespacedSharedSecret
      parameters:
      - name: name
        in: path
        description: name of the SharedSecret
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: object name and auth scope, such as for teams and projects
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SharedSecret
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete a SharedSecret
      operationId: deleteManagementLoftShV1NamespacedSharedSecret
      parameters:
      - name: name
        in: path
        description: name of the SharedSecret
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: object name and auth scope, such as for teams and projects
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SharedSecret
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified SharedSecret
      operationId: patchManagementLoftShV1NamespacedSharedSecret
      parameters:
      - name: name
        in: path
        description: name of the SharedSecret
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: object name and auth scope, such as for teams and projects
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SharedSecret
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/ownedaccesskeys:
    post:
      tags:
      - managementLoftSh_v1
      description: create an OwnedAccessKey
      operationId: createManagementLoftShV1OwnedAccessKey
      parameters:
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: OwnedAccessKey
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/ownedaccesskeys/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified OwnedAccessKey
      operationId: readManagementLoftShV1OwnedAccessKey
      parameters:
      - name: name
        in: path
        description: name of the OwnedAccessKey
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: OwnedAccessKey
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified OwnedAccessKey
      operationId: replaceManagementLoftShV1OwnedAccessKey
      parameters:
      - name: name
        in: path
        description: name of the OwnedAccessKey
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: OwnedAccessKey
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete an OwnedAccessKey
      operationId: deleteManagementLoftShV1OwnedAccessKey
      parameters:
      - name: name
        in: path
        description: name of the OwnedAccessKey
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: OwnedAccessKey
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified OwnedAccessKey
      operationId: patchManagementLoftShV1OwnedAccessKey
      parameters:
      - name: name
        in: path
        description: name of the OwnedAccessKey
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: OwnedAccessKey
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/policyviolations:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind PolicyViolation
      operationId: listManagementLoftShV1PolicyViolation
      parameters:
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.PolicyViolationList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.PolicyViolationList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.PolicyViolationList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: PolicyViolation
        version: v1
  /apis/management.loft.sh/v1/resetaccesskeys:
    post:
      tags:
      - managementLoftSh_v1
      description: create a ResetAccessKey
      operationId: createManagementLoftShV1ResetAccessKey
      parameters:
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKey'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKey'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKey'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKey'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKey'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKey'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKey'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: ResetAccessKey
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/selfsubjectaccessreviews:
    post:
      tags:
      - managementLoftSh_v1
      description: create a SelfSubjectAccessReview
      operationId: createManagementLoftShV1SelfSubjectAccessReview
      parameters:
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReview'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReview'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReview'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReview'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReview'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReview'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReview'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SelfSubjectAccessReview
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/selves:
    post:
      tags:
      - managementLoftSh_v1
      description: create a Self
      operationId: createManagementLoftShV1Self
      parameters:
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Self'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Self'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Self'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Self'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Self'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Self'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Self'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Self
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/selves/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified Self
      operationId: readManagementLoftShV1Self
      parameters:
      - name: name
        in: path
        description: name of the Self
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Self'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Self'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Self
        version: v1
  /apis/management.loft.sh/v1/sharedsecrets:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind SharedSecret
      operationId: listManagementLoftShV1SharedSecretForAllNamespaces
      parameters:
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecretList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecretList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecretList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SharedSecret
        version: v1
  /apis/management.loft.sh/v1/spaceconstraints:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind SpaceConstraint
      operationId: listManagementLoftShV1SpaceConstraint
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraintList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraintList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraintList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceConstraint
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create a SpaceConstraint
      operationId: createManagementLoftShV1SpaceConstraint
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceConstraint
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete collection of SpaceConstraint
      operationId: deleteManagementLoftShV1CollectionSpaceConstraint
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceConstraint
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/spaceconstraints/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified SpaceConstraint
      operationId: readManagementLoftShV1SpaceConstraint
      parameters:
      - name: name
        in: path
        description: name of the SpaceConstraint
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceConstraint
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified SpaceConstraint
      operationId: replaceManagementLoftShV1SpaceConstraint
      parameters:
      - name: name
        in: path
        description: name of the SpaceConstraint
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceConstraint
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete a SpaceConstraint
      operationId: deleteManagementLoftShV1SpaceConstraint
      parameters:
      - name: name
        in: path
        description: name of the SpaceConstraint
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceConstraint
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified SpaceConstraint
      operationId: patchManagementLoftShV1SpaceConstraint
      parameters:
      - name: name
        in: path
        description: name of the SpaceConstraint
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceConstraint
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/spacetemplates:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind SpaceTemplate
      operationId: listManagementLoftShV1SpaceTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplateList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplateList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplateList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceTemplate
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create a SpaceTemplate
      operationId: createManagementLoftShV1SpaceTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceTemplate
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete collection of SpaceTemplate
      operationId: deleteManagementLoftShV1CollectionSpaceTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceTemplate
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/spacetemplates/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified SpaceTemplate
      operationId: readManagementLoftShV1SpaceTemplate
      parameters:
      - name: name
        in: path
        description: name of the SpaceTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceTemplate
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified SpaceTemplate
      operationId: replaceManagementLoftShV1SpaceTemplate
      parameters:
      - name: name
        in: path
        description: name of the SpaceTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceTemplate
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete a SpaceTemplate
      operationId: deleteManagementLoftShV1SpaceTemplate
      parameters:
      - name: name
        in: path
        description: name of the SpaceTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceTemplate
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified SpaceTemplate
      operationId: patchManagementLoftShV1SpaceTemplate
      parameters:
      - name: name
        in: path
        description: name of the SpaceTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SpaceTemplate
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/subjectaccessreviews:
    post:
      tags:
      - managementLoftSh_v1
      description: create a SubjectAccessReview
      operationId: createManagementLoftShV1SubjectAccessReview
      parameters:
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReview'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReview'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReview'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReview'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReview'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReview'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReview'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: SubjectAccessReview
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/tasks:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind Task
      operationId: listManagementLoftShV1Task
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TaskList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TaskList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TaskList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Task
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create a Task
      operationId: createManagementLoftShV1Task
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Task
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete collection of Task
      operationId: deleteManagementLoftShV1CollectionTask
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Task
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/tasks/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified Task
      operationId: readManagementLoftShV1Task
      parameters:
      - name: name
        in: path
        description: name of the Task
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Task
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified Task
      operationId: replaceManagementLoftShV1Task
      parameters:
      - name: name
        in: path
        description: name of the Task
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Task
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete a Task
      operationId: deleteManagementLoftShV1Task
      parameters:
      - name: name
        in: path
        description: name of the Task
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Task
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified Task
      operationId: patchManagementLoftShV1Task
      parameters:
      - name: name
        in: path
        description: name of the Task
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Task
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/tasks/{name}/log:
    get:
      tags:
      - managementLoftSh_v1
      description: read log of the specified Task
      operationId: readManagementLoftShV1TaskLog
      parameters:
      - name: follow
        in: query
        schema:
          type: boolean
      - name: insecureSkipTLSVerifyBackend
        in: query
        schema:
          type: boolean
      - name: limitBytes
        in: query
        schema:
          type: integer
      - name: name
        in: path
        description: name of the TaskLog
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: previous
        in: query
        schema:
          type: boolean
      - name: sinceSeconds
        in: query
        schema:
          type: integer
      - name: tailLines
        in: query
        schema:
          type: integer
      - name: timestamps
        in: query
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TaskLog'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TaskLog'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: TaskLog
        version: v1
  /apis/management.loft.sh/v1/teams:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind Team
      operationId: listManagementLoftShV1Team
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TeamList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TeamList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TeamList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Team
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create a Team
      operationId: createManagementLoftShV1Team
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Team
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete collection of Team
      operationId: deleteManagementLoftShV1CollectionTeam
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Team
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/teams/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified Team
      operationId: readManagementLoftShV1Team
      parameters:
      - name: name
        in: path
        description: name of the Team
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Team
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified Team
      operationId: replaceManagementLoftShV1Team
      parameters:
      - name: name
        in: path
        description: name of the Team
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Team
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete a Team
      operationId: deleteManagementLoftShV1Team
      parameters:
      - name: name
        in: path
        description: name of the Team
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Team
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified Team
      operationId: patchManagementLoftShV1Team
      parameters:
      - name: name
        in: path
        description: name of the Team
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: Team
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/teams/{name}/accesskeys:
    get:
      tags:
      - managementLoftSh_v1
      description: read accesskeys of the specified Team
      operationId: readManagementLoftShV1TeamAccesskeys
      parameters:
      - name: name
        in: path
        description: name of the TeamAccessKeys
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TeamAccessKeys'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TeamAccessKeys'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: TeamAccessKeys
        version: v1
  /apis/management.loft.sh/v1/teams/{name}/clusters:
    get:
      tags:
      - managementLoftSh_v1
      description: read clusters of the specified Team
      operationId: readManagementLoftShV1TeamClusters
      parameters:
      - name: name
        in: path
        description: name of the TeamClusters
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TeamClusters'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TeamClusters'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: TeamClusters
        version: v1
  /apis/management.loft.sh/v1/users:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind User
      operationId: listManagementLoftShV1User
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: User
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create an User
      operationId: createManagementLoftShV1User
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: User
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete collection of User
      operationId: deleteManagementLoftShV1CollectionUser
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: User
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/users/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified User
      operationId: readManagementLoftShV1User
      parameters:
      - name: name
        in: path
        description: name of the User
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: User
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified User
      operationId: replaceManagementLoftShV1User
      parameters:
      - name: name
        in: path
        description: name of the User
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: User
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete an User
      operationId: deleteManagementLoftShV1User
      parameters:
      - name: name
        in: path
        description: name of the User
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: User
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified User
      operationId: patchManagementLoftShV1User
      parameters:
      - name: name
        in: path
        description: name of the User
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: User
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/users/{name}/accesskeys:
    get:
      tags:
      - managementLoftSh_v1
      description: read accesskeys of the specified User
      operationId: readManagementLoftShV1UserAccesskeys
      parameters:
      - name: name
        in: path
        description: name of the UserAccessKeys
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserAccessKeys'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserAccessKeys'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: UserAccessKeys
        version: v1
  /apis/management.loft.sh/v1/users/{name}/clusters:
    get:
      tags:
      - managementLoftSh_v1
      description: read clusters of the specified User
      operationId: readManagementLoftShV1UserClusters
      parameters:
      - name: name
        in: path
        description: name of the UserClusters
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserClusters'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserClusters'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: UserClusters
        version: v1
  /apis/management.loft.sh/v1/users/{name}/profile:
    get:
      tags:
      - managementLoftSh_v1
      description: read profile of the specified User
      operationId: readManagementLoftShV1UserProfile
      parameters:
      - name: name
        in: path
        description: name of the UserProfile
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserProfile'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserProfile'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: UserProfile
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create profile of an User
      operationId: createManagementLoftShV1UserProfile
      parameters:
      - name: name
        in: path
        description: name of the UserProfile
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserProfile'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserProfile'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserProfile'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserProfile'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserProfile'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserProfile'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserProfile'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: UserProfile
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/virtualclustertemplates:
    get:
      tags:
      - managementLoftSh_v1
      description: list objects of kind VirtualClusterTemplate
      operationId: listManagementLoftShV1VirtualClusterTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplateList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplateList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplateList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: VirtualClusterTemplate
        version: v1
    post:
      tags:
      - managementLoftSh_v1
      description: create a VirtualClusterTemplate
      operationId: createManagementLoftShV1VirtualClusterTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: VirtualClusterTemplate
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete collection of VirtualClusterTemplate
      operationId: deleteManagementLoftShV1CollectionVirtualClusterTemplate
      parameters:
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: VirtualClusterTemplate
        version: v1
      x-codegen-request-body-name: body
  /apis/management.loft.sh/v1/virtualclustertemplates/{name}:
    get:
      tags:
      - managementLoftSh_v1
      description: read the specified VirtualClusterTemplate
      operationId: readManagementLoftShV1VirtualClusterTemplate
      parameters:
      - name: name
        in: path
        description: name of the VirtualClusterTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: VirtualClusterTemplate
        version: v1
    put:
      tags:
      - managementLoftSh_v1
      description: replace the specified VirtualClusterTemplate
      operationId: replaceManagementLoftShV1VirtualClusterTemplate
      parameters:
      - name: name
        in: path
        description: name of the VirtualClusterTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: VirtualClusterTemplate
        version: v1
      x-codegen-request-body-name: body
    delete:
      tags:
      - managementLoftSh_v1
      description: delete a VirtualClusterTemplate
      operationId: deleteManagementLoftShV1VirtualClusterTemplate
      parameters:
      - name: name
        in: path
        description: name of the VirtualClusterTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: gracePeriodSeconds
        in: query
        description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        schema:
          type: integer
      - name: orphanDependents
        in: query
        description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        schema:
          type: boolean
      - name: propagationPolicy
        in: query
        description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        202:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: VirtualClusterTemplate
        version: v1
      x-codegen-request-body-name: body
    patch:
      tags:
      - managementLoftSh_v1
      description: partially update the specified VirtualClusterTemplate
      operationId: patchManagementLoftShV1VirtualClusterTemplate
      parameters:
      - name: name
        in: path
        description: name of the VirtualClusterTemplate
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: dryRun
        in: query
        description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        schema:
          type: string
      - name: fieldManager
        in: query
        description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        schema:
          type: string
      - name: force
        in: query
        description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        schema:
          type: boolean
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: management.loft.sh
        kind: VirtualClusterTemplate
        version: v1
      x-codegen-request-body-name: body
  /apis/virtualcluster.loft.sh/:
    get:
      tags:
      - virtualclusterLoftSh
      description: get information of a group
      operationId: getVirtualclusterLoftShAPIGroup
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
  /apis/virtualcluster.loft.sh/v1/:
    get:
      tags:
      - virtualclusterLoftSh_v1
      description: get available resources
      operationId: getVirtualclusterLoftShV1APIResources
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
  /apis/virtualcluster.loft.sh/v1/helmreleases:
    get:
      tags:
      - virtualclusterLoftSh_v1
      description: list objects of kind HelmRelease
      operationId: listVirtualclusterLoftShV1HelmReleaseForAllNamespaces
      parameters:
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmReleaseList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmReleaseList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmReleaseList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: virtualcluster.loft.sh
        kind: HelmRelease
        version: v1
  /apis/virtualcluster.loft.sh/v1/namespaces/{namespace}/helmreleases:
    get:
      tags:
      - virtualclusterLoftSh_v1
      description: list objects of kind HelmRelease
      operationId: listVirtualclusterLoftShV1NamespacedHelmRelease
      parameters:
      - name: allowWatchBookmarks
        in: query
        description: allowWatchBookmarks requests watch events with type "BOOKMARK".
          Servers that do not implement bookmarks may ignore this flag and bookmarks
          are sent at the server's discretion. Clients should not assume bookmarks
          are returned at any specific interval, nor may they assume the server will
          send any BOOKMARK event during a session. If this is not a watch, this field
          is ignored. If the feature gate WatchBookmarks is not enabled in apiserver,
          this field is ignored.
        schema:
          type: boolean
      - name: continue
        in: query
        description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        schema:
          type: string
      - name: fieldSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        schema:
          type: string
      - name: labelSelector
        in: query
        description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        schema:
          type: string
      - name: limit
        in: query
        description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        schema:
          type: integer
      - name: namespace
        in: path
        description: object name and auth scope, such as for teams and projects
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      - name: resourceVersion
        in: query
        description: |-
          resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: resourceVersionMatch
        in: query
        description: |-
          resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

          Defaults to unset
        schema:
          type: string
      - name: timeoutSeconds
        in: query
        description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        schema:
          type: integer
      - name: watch
        in: query
        description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmReleaseList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmReleaseList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmReleaseList'
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: virtualcluster.loft.sh
        kind: HelmRelease
        version: v1
  /apis/virtualcluster.loft.sh/v1/namespaces/{namespace}/helmreleases/{name}:
    get:
      tags:
      - virtualclusterLoftSh_v1
      description: read the specified HelmRelease
      operationId: readVirtualclusterLoftShV1NamespacedHelmRelease
      parameters:
      - name: name
        in: path
        description: name of the HelmRelease
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: object name and auth scope, such as for teams and projects
        required: true
        schema:
          type: string
      - name: pretty
        in: query
        description: If 'true', then the output is pretty printed.
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmRelease'
            application/yaml:
              schema:
                $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmRelease'
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: virtualcluster.loft.sh
        kind: HelmRelease
        version: v1
components:
  schemas:
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.Account:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountStatus'
      description: Account
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountNamespaceStatus:
      type: object
      properties:
        name:
          type: string
      description: AccountNamespaceStatus is the status for the account access objects
        that belong to the account
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountSpace:
      type: object
      properties:
        clusterRole:
          type: string
          description: This defines the cluster role that will be used for the rolebinding
            when creating a new space for the selected subjects
        limit:
          type: integer
          description: Limit defines how many spaces are allowed to be owned by this
            account. If no value is specified, unlimited spaces can be created by
            the account (if the users have the rights to create spaces)
          format: int32
        spaceTemplate:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountSpaceTemplate'
        templateInstances:
          type: array
          description: TemplateInstances are templates that should be created by default
            in a newly created space by this account. Kiosk makes sure that these
            templates are deployed successfully, before the users of this account
            will get access to the space
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountTemplateInstanceTemplate'
      description: AccountSpace defines properties how many spaces can be owned by
        the account and how they should be created
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountSpaceTemplate:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      description: AccountSpaceTemplate defines a space template
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountSpec:
      type: object
      properties:
        space:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountSpace'
        subjects:
          type: array
          description: Subjects are the account users
          items:
            $ref: '#/components/schemas/io.k8s.api.rbac.v1.Subject'
      description: AccountSpec defines a single account configuration
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountStatus:
      type: object
      properties:
        namespaces:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountNamespaceStatus'
      description: AccountStatus describes the current status of the account is the
        cluster
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountTemplateInstanceTemplate:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceSpec'
      description: AccountTemplateInstanceTemplate defines a template instance template
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.EmbeddedResource:
      type: object
      description: EmbeddedResource holds a kubernetes resource
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.HelmChart:
      type: object
      properties:
        repository:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.HelmChartRepository'
      description: HelmChart holds the information needed to find a chart to deploy
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.HelmChartRepository:
      required:
      - name
      type: object
      properties:
        insecure:
          type: boolean
          description: Determines if the remote location uses an insecure TLS certificate.
        name:
          type: string
          description: Name of the chart to deploy
        password:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.HelmSecretRef'
        repoUrl:
          type: string
          description: The repo url to use
        username:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.HelmSecretRef'
        version:
          type: string
          description: Version is the version of the chart to deploy
      description: HelmChartRepository defines a helm repository where kiosk can load
        a chart from
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.HelmConfiguration:
      type: object
      properties:
        chart:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.HelmChart'
        releaseName:
          type: string
          description: The helm release name. If omitted the template name will be
            used
        setValues:
          type: array
          description: Values in the form of name=value that will be passed to the
            helm command during helm template
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.HelmSetValue'
        values:
          type: string
          description: The additional helm values to use. Expected block string
      description: HelmConfiguration holds the helm configuration
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.HelmSecretRef:
      required:
      - key
      - name
      - namespace
      type: object
      properties:
        key:
          type: string
        name:
          type: string
        namespace:
          type: string
      description: HelmSecretRef holds a secret reference to a secret
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.HelmSetValue:
      required:
      - name
      - value
      type: object
      properties:
        forceString:
          type: boolean
          description: ForceString specifies if the parameter `--set` or `--set-string`
            should be used
        name:
          type: string
          description: The path of the value to set
        value:
          type: string
          description: The value to set
      description: HelmSetValue defines a name=value pair that will be passed to helm
        template
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.RemoteManifest:
      type: object
      properties:
        insecure:
          type: boolean
          description: Insecure determines if the remote location uses an insecure
            TLS certificate.
        url:
          type: string
          description: URL is the path to the remote manifest
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.Template:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        parameters:
          type: array
          description: 'Parameters can be used to replace certain parts of the template.
            A parameter is referenced by this format: ${NAME}, to parse the value
            as an expression write ${{NAME}} instead. Besides the parameters defined
            here, the following predefined parameters can be used: - ${NAMESPACE}:
            the namespace where the template instance was created - ${ACCOUNT}: the
            account name of the account that owns the space (if any)'
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateParameter'
        resources:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateResources'
      description: Template is the Schema for the templates API
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateInstance:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceStatus'
      description: TemplateInstance is the Schema for the templatesinstance API
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceParameter:
      type: object
      properties:
        name:
          type: string
          description: Name is the name of the parameter to set
        value:
          type: string
          description: Value is the value of the parameter to set
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceSpec:
      required:
      - template
      type: object
      properties:
        parameters:
          type: array
          description: Parameters hold the values of the defined parameters in the
            template
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceParameter'
        sync:
          type: boolean
          description: If true the template instance will keep the deployed resources
            in sync with the template.
        template:
          type: string
          description: The template to instantiate. This is an immutable field
      description: TemplateInstanceSpec holds the expected cluster status of the template
        instance
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceStatus:
      required:
      - status
      type: object
      properties:
        message:
          type: string
          description: A human readable message indicating details about why the namespace
            is in this condition.
        observedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        reason:
          type: string
          description: A brief CamelCase message indicating details about why the
            namespace is in this state.
        status:
          type: string
          description: Status holds the template instances status
        templateManifests:
          type: string
          description: TemplateManifests are the manifests that were rendered before
        templateResourceVersion:
          type: string
          description: TemplateResourceVersion is the resource version of the template
            that was applied
      description: TemplateInstanceStatus describes the current status of the template
        instance in the cluster
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateParameter:
      type: object
      properties:
        name:
          type: string
          description: Name is the name of the parameter
        required:
          type: boolean
          description: If required is true, the template instance must define this
            parameter, otherwise the deployment will fail.
        validation:
          type: string
          description: Validation takes a regular expression as value to verify the
            provided value does match expected values.
        value:
          type: string
          description: Value is the default value of the parameter
    com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateResources:
      type: object
      properties:
        helm:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.HelmConfiguration'
        manifests:
          type: array
          description: manifest represents kubernetes resources that will be deployed
            into the target namespace
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.EmbeddedResource'
        remoteManifests:
          type: array
          description: remote manifests holds urls that should be deployed as part
            of the template
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.RemoteManifest'
      description: TemplateResources defines a templates resources
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.AppliedMetadata:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
        labels:
          type: object
          additionalProperties:
            type: string
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.AppliedObject:
      type: object
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        name:
          type: string
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Chart:
      type: object
      properties:
        insecureSkipTlsVerify:
          type: boolean
          description: If tls certificate checks for the chart download should be
            skipped
        name:
          type: string
          description: Name is the chart name in the repository
        password:
          type: string
          description: The password that is required for this repository
        repoURL:
          type: string
          description: RepoURL is the repo url where the chart can be found
        username:
          type: string
          description: The username that is required for this repository
        version:
          type: string
          description: Version is the chart version in the repository
      description: Chart describes a chart
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ChartInfo:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ChartInfoSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ChartInfoStatus'
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ChartInfoSpec:
      type: object
      properties:
        chart:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Chart'
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ChartInfoStatus:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Metadata'
        readme:
          type: string
          description: Readme is the readme of the chart
        values:
          type: string
          description: Values are the default values of the chart
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ClusterQuota:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ClusterQuotaSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ClusterQuotaStatus'
      description: ClusterQuota holds the virtual cluster information
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ClusterQuotaSpec:
      type: object
      properties:
        quota:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaSpec'
        team:
          type: string
          description: Team is the name of the team this quota should apply to
        user:
          type: string
          description: User is the name of the user this quota should apply to
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ClusterQuotaStatus:
      type: object
      properties:
        namespaces:
          type: array
          description: Namespaces slices the usage by project.  This division allows
            for quick resolution of deletion reconciliation inside of a single project
            without requiring a recalculation across all projects.  This can be used
            to pull the deltas for a given project.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterQuotaStatusByNamespace'
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.UserOrTeam'
        total:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaStatus'
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo:
      type: object
      properties:
        displayName:
          type: string
          description: The display name shown in the UI
        email:
          type: string
          description: The users email address
        name:
          type: string
          description: Name is the kubernetes name of the object
        subject:
          type: string
          description: The user subject
        username:
          type: string
          description: The username that is used to login
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EpochInfo:
      type: object
      properties:
        slept:
          type: integer
          description: Amount of milliseconds the space has slept in the epoch
          format: int64
        start:
          type: integer
          description: Timestamp when the epoch has started
          format: int64
      description: EpochInfo holds information about how long the space was sleeping
        in the epoch
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.HelmRelease:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.HelmReleaseSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.HelmReleaseStatus'
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.HelmReleaseSpec:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
          description: Annotations are extra annotations for this helm release
        chart:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Chart'
        manifests:
          type: string
          description: Manifests holds kube manifests that will be deployed as a chart
        parameters:
          type: string
          description: Parameters are additional helm chart values that will get merged
            with config and are then used to deploy the helm chart.
        values:
          type: string
          description: Values is the set of extra Values added to the chart. These
            values merge with the default values inside of the chart. You can use
            golang templating in here with values from parameters.
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.HelmReleaseStatus:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Info'
        metadata:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Metadata'
        version:
          type: integer
          description: Revision is an int which represents the revision of the release.
          format: int32
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Info:
      type: object
      properties:
        deleted:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description:
          type: string
          description: Description is human-friendly "log entry" about this release.
        first_deployed:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        last_deployed:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        notes:
          type: string
          description: Contains the rendered templates/NOTES.txt if available
        status:
          type: string
          description: Status is the current state of the release
      description: Info describes release information.
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.LastActivityInfo:
      type: object
      properties:
        apiGroup:
          type: string
          description: APIGroup is the api group that was used for the request
        name:
          type: string
          description: Name is the name of the resource
        resource:
          type: string
          description: Resource is the resource of the request
        subject:
          type: string
          description: Subject is the user or team where this activity was recorded
        subresource:
          type: string
          description: Subresource is the subresource of the request
        verb:
          type: string
          description: Verb is the verb that was used for the request
        virtualCluster:
          type: string
          description: VirtualCluster is the virtual cluster this activity happened
            in
      description: LastActivityInfo holds information about the last activity
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.LocalClusterAccess:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.LocalClusterAccessSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.LocalClusterAccessStatus'
      description: LocalClusterAccess holds the cluster access information
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.LocalClusterAccessSpec:
      type: object
      properties:
        clusterRoles:
          type: array
          description: ClusterRoles define the cluster roles that the users should
            have assigned in the cluster.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterRoleRef'
        description:
          type: string
          description: Description is the description of this object in human-readable
            text.
        displayName:
          type: string
          description: DisplayName is the name that should be shown in the UI
        priority:
          type: integer
          description: Priority is a unique value that specifies the priority of this
            cluster access for the space constraints and quota. A higher priority
            means the cluster access object will override the space constraints of
            lower priority cluster access objects
          format: int32
        quota:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.AccessQuota'
        spaceConstraintsRef:
          type: string
          description: SpaceConstraintsRef is a reference to a space constraints object
        teams:
          type: array
          description: Teams are the teams affected by this cluster access object
          items:
            type: string
        users:
          type: array
          description: Users are the users affected by this cluster access object
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.UserOrTeam'
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.LocalClusterAccessStatus:
      type: object
      properties:
        spaceConstraint:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        users:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.UserOrTeam'
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Maintainer:
      type: object
      properties:
        email:
          type: string
          description: Email is an optional email address to contact the named maintainer
        name:
          type: string
          description: Name is a user name or organization name
        url:
          type: string
          description: URL is an optional URL to an address for the named maintainer
      description: Maintainer describes a Chart maintainer.
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Metadata:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
          description: Annotations are additional mappings uninterpreted by Helm,
            made available for inspection by other applications.
        apiVersion:
          type: string
          description: The API Version of this chart.
        appVersion:
          type: string
          description: The version of the application enclosed inside of this chart.
        condition:
          type: string
          description: The condition to check to enable chart
        deprecated:
          type: boolean
          description: Whether or not this chart is deprecated
        description:
          type: string
          description: A one-sentence description of the chart
        home:
          type: string
          description: The URL to a relevant project page, git repo, or contact person
        icon:
          type: string
          description: The URL to an icon file.
        keywords:
          type: array
          description: A list of string keywords
          items:
            type: string
        kubeVersion:
          type: string
          description: KubeVersion is a SemVer constraint specifying the version of
            Kubernetes required.
        maintainers:
          type: array
          description: A list of name and URL/email address combinations for the maintainer(s)
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Maintainer'
        name:
          type: string
          description: The name of the chart
        sources:
          type: array
          description: Source is the URL to the source code of this chart
          items:
            type: string
        tags:
          type: string
          description: The tags to check to enable chart
        type:
          type: string
          description: 'Specifies the chart type: application or library'
        urls:
          type: array
          description: Urls where to find the chart contents
          items:
            type: string
        version:
          type: string
          description: A SemVer 2 conformant version string of the chart
      description: Metadata for a Chart file. This models the structure of a Chart.yaml
        file.
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SleepModeConfig:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SleepModeConfigSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SleepModeConfigStatus'
      description: SleepModeConfig holds the sleepmode information
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SleepModeConfigSpec:
      type: object
      properties:
        deleteAfter:
          type: integer
          description: DeleteAfter specifies after how many seconds of inactivity
            the space should be deleted
          format: int64
        deleteAllPods:
          type: boolean
          description: If true will delete all pods on sleep in the space regardless
            of if they have a parent set
        forceSleep:
          type: boolean
          description: If force sleep is true the space will sleep
        forceSleepDuration:
          type: integer
          description: If force sleep duration is set, this will force the space to
            sleep for the given duration. It also implies that forceSleep is true.
            During this period loft will also block certain requests to that space.
            If this is set to 0, it means the space will sleep until it is manually
            woken up via the cli or ui.
          format: int64
        sleepAfter:
          type: integer
          description: SleepAfter specifies after how many seconds of inactivity the
            space should sleep
          format: int64
        sleepSchedule:
          type: string
          description: 'SleepSchedule specifies scheduled space sleep in Cron format,
            see https://en.wikipedia.org/wiki/Cron. Note: timezone defined in the
            schedule string will be ignored. Use ".Spec.Timezone" field instead.'
        timezone:
          type: string
          description: Timezone specifies time zone used for scheduled space operations.
            Defaults to UTC. Accepts the same format as time.LoadLocation() in Go
            (https://pkg.go.dev/time#LoadLocation). The value should be a location
            name corresponding to a file in the IANA Time Zone database, such as "America/New_York".
        wakeupSchedule:
          type: string
          description: 'WakeupSchedule specifies scheduled wakeup from sleep in Cron
            format, see https://en.wikipedia.org/wiki/Cron. Note: timezone defined
            in the schedule string will be ignored. Use ".Spec.Timezone" field instead.'
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SleepModeConfigStatus:
      type: object
      properties:
        currentEpoch:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EpochInfo'
        lastActivity:
          type: integer
          description: LastActivity indicates the last activity in the namespace
          format: int64
        lastActivityInfo:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.LastActivityInfo'
        lastEpoch:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EpochInfo'
        scheduledSleep:
          type: integer
          description: Indicates time of the next scheduled sleep based on .Spec.SleepSchedule
            and .Spec.ScheduleTimeZone The time is a Unix time, the number of seconds
            elapsed since January 1, 1970 UTC
          format: int64
        scheduledWakeup:
          type: integer
          description: Indicates time of the next scheduled wakeup based on .Spec.WakeupSchedule
            and .Spec.ScheduleTimeZone The time is a Unix time, the number of seconds
            elapsed since January 1, 1970 UTC
          format: int64
        sleepType:
          type: string
          description: SleepType specifies a type of sleep, which has effect on which
            actions will cause the space to wake up.
        sleepingSince:
          type: integer
          description: SleepingSince specifies since when the space is sleeping (if
            this is not specified, loft assumes the space is not sleeping)
          format: int64
        sleptLastSevenDays:
          type: number
          description: This is a calculated field that will be returned but not saved
            and describes the percentage since the space was created or the last 7
            days the space has slept
          format: double
        sleptLastThirtyDays:
          type: number
          description: This is a calculated field that will be returned but not saved
            and describes the percentage since the space was created or the last 30
            days the space has slept
          format: double
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Space:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SpaceSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SpaceStatus'
      description: Space
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SpaceConstraintNamespaceStatus:
      type: object
      properties:
        appliedClusterRole:
          type: string
          description: AppliedClusterRole is the cluster role that was bound to this
            namespace
        appliedMetadata:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.AppliedMetadata'
        appliedObjects:
          type: array
          description: AppliedObjects are the objects that were applied on this namespace
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.AppliedObject'
        message:
          type: string
          description: Message is the human-readable message why this space is in
            this phase
        observedGeneration:
          type: integer
          description: ObservedGeneration of the space constraint
          format: int64
        phase:
          type: string
          description: Phase the namespace is in
        reason:
          type: string
          description: Reason why this namespace is in the current phase
        spaceConstraint:
          type: string
          description: SpaceConstraint are the applied space constraints
        team:
          type: string
          description: Team that was used to apply the space constraints
        user:
          type: string
          description: User that was used to apply the space constraints
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SpaceSpec:
      type: object
      properties:
        finalizers:
          type: array
          description: 'Finalizers is an opaque list of values that must be empty
            to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/'
          items:
            type: string
        team:
          type: string
          description: Team is the owning team of the space
        user:
          type: string
          description: User is the owning user of the space
      description: SpaceSpec defines the desired state of Space
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SpaceStatus:
      type: object
      properties:
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.UserOrTeam'
        phase:
          type: string
          description: 'Phase is the current lifecycle phase of the namespace. More
            info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/'
        sleepModeConfig:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SleepModeConfig'
        spaceConstraint:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        spaceConstraintStatus:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SpaceConstraintNamespaceStatus'
      description: SpaceStatus defines the observed state of Space
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.UserOrTeam:
      type: object
      properties:
        team:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        user:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.VirtualCluster:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.VirtualClusterSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.VirtualClusterStatus'
      description: VirtualCluster holds the virtual cluster information
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.VirtualClusterSpec:
      type: object
      properties:
        helmRelease:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease'
        kubeConfigRef:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.SecretRef'
        pod:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.PodSelector'
    com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.VirtualClusterStatus:
      type: object
      properties:
        conditions:
          type: array
          description: Conditions holds several conditions the virtual cluster might
            be in
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.Condition'
        controlPlaneReady:
          type: boolean
          description: ControlPlaneReady defines if the virtual cluster control plane
            is ready.
        helmRelease:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterHelmReleaseStatus'
        message:
          type: string
          description: Message describes the reason in human readable form why the
            cluster is in the currrent phase
        observedGeneration:
          type: integer
          description: ObservedGeneration is the latest generation observed by the
            controller.
          format: int64
        phase:
          type: string
          description: Phase describes the current phase the virtual cluster is in
        reason:
          type: string
          description: Reason describes the reason in machine readable form why the
            cluster is in the current phase
        sleepModeConfig:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SleepModeConfig'
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.AccessQuota:
      type: object
      properties:
        hard:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: 'hard is the set of desired hard limits for each named resource.
            More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterQuota:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterQuotaSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterQuotaStatus'
      description: ClusterQuota is the Schema for the cluster quotas api
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterQuotaSpec:
      type: object
      properties:
        quota:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaSpec'
        team:
          type: string
          description: Team is the name of the team this quota should apply to
        user:
          type: string
          description: User is the name of the user this quota should apply to
      description: ClusterQuotaSpec defines the desired state of ClusterQuota
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterQuotaStatus:
      type: object
      properties:
        namespaces:
          type: array
          description: Namespaces slices the usage by project.  This division allows
            for quick resolution of deletion reconciliation inside of a single project
            without requiring a recalculation across all projects.  This can be used
            to pull the deltas for a given project.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterQuotaStatusByNamespace'
        total:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaStatus'
      description: ClusterQuotaStatus defines the observed state of ClusterQuota
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterQuotaStatusByNamespace:
      required:
      - namespace
      type: object
      properties:
        namespace:
          type: string
          description: Namespace of the account this account quota applies to
        status:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaStatus'
      description: ClusterQuotaStatusByNamespace holds the status of a specific namespace
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterRoleRef:
      type: object
      properties:
        name:
          type: string
          description: Name is the cluster role to assign
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterRoleTemplateTemplate:
      type: object
      properties:
        aggregationRule:
          $ref: '#/components/schemas/io.k8s.api.rbac.v1.AggregationRule'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        rules:
          type: array
          description: Rules holds all the PolicyRules for this ClusterRole
          items:
            $ref: '#/components/schemas/io.k8s.api.rbac.v1.PolicyRule'
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.Condition:
      required:
      - status
      - type
      type: object
      properties:
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        message:
          type: string
          description: A human readable message indicating details about the transition.
            This field may be empty.
        reason:
          type: string
          description: The reason for the condition's last transition in CamelCase.
            The specific API may choose whether this field is considered a guaranteed
            API. This field may not be empty.
        severity:
          type: string
          description: Severity provides an explicit classification of Reason code,
            so the users or machines can immediately understand the current situation
            and act accordingly. The Severity field MUST be set only when Status=False.
        status:
          type: string
          description: Status of the condition, one of True, False, Unknown.
        type:
          type: string
          description: Type of condition in CamelCase or in foo.example.com/CamelCase.
            Many .condition.type values are consistent across resources like Available,
            but because arbitrary conditions can be useful (see .node.status.conditions),
            the ability to deconflict is important.
      description: Condition defines an observation of a Cluster API resource operational
        state.
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterAccess:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterAccessSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterAccessStatus'
      description: LocalClusterAccess holds the cluster access information
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterAccessSpec:
      type: object
      properties:
        clusterRoles:
          type: array
          description: ClusterRoles define the cluster roles that the users should
            have assigned in the cluster.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterRoleRef'
        description:
          type: string
          description: Description is the description of this object in human-readable
            text.
        displayName:
          type: string
          description: DisplayName is the name that should be shown in the UI
        priority:
          type: integer
          description: Priority is a unique value that specifies the priority of this
            cluster access for the space constraints and quota. A higher priority
            means the cluster access object will override the space constraints of
            lower priority cluster access objects
          format: int32
        quota:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.AccessQuota'
        spaceConstraintsRef:
          type: string
          description: SpaceConstraintsRef is a reference to a space constraints object
        teams:
          type: array
          description: Teams are the teams affected by this cluster access object
          items:
            type: string
        users:
          type: array
          description: Users are the users affected by this cluster access object
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.UserOrTeam'
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterAccessStatus:
      type: object
      description: LocalClusterAccessStatus holds the status of a user access
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterRoleTemplate:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterRoleTemplateSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterRoleTemplateStatus'
      description: LocalClusterRoleTemplate holds a cluster role configuration
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterRoleTemplateSpec:
      type: object
      properties:
        clusterRoleTemplate:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterRoleTemplateTemplate'
        description:
          type: string
          description: Description is the description of this object in human-readable
            text.
        displayName:
          type: string
          description: DisplayName is the name that should be shown in the UI
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterRoleTemplateStatus:
      type: object
      description: LocalClusterRoleTemplateStatus holds the status of a user access
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalSpaceConstraint:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalSpaceConstraintSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalSpaceConstraintStatus'
      description: LocalSpaceConstraint holds the space constraints
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalSpaceConstraintSpec:
      type: object
      properties:
        description:
          type: string
          description: Description is the description of this object in human-readable
            text.
        displayName:
          type: string
          description: DisplayName is the name that should be shown in the UI
        spaceTemplate:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.SpaceTemplate'
        sync:
          type: boolean
          description: Sync specifies if spaces that were created through this space
            constraint object should get synced with this object.
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalSpaceConstraintStatus:
      type: object
      description: LocalSpaceConstraintStatus holds the status of a user access
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalTeam:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalTeamSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalTeamStatus'
      description: LocalTeam holds the cluster user information
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalTeamSpec:
      type: object
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalTeamStatus:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
          description: Annotations are the annotations of the user
        displayName:
          type: string
          description: The display name shown in the UI
        groups:
          type: array
          description: The groups defined in a token that belong to a team
          items:
            type: string
        labels:
          type: object
          additionalProperties:
            type: string
          description: Labels are the labels of the user
        username:
          type: string
          description: The username of the team that will be used for identification
            and docker registry namespace
        users:
          type: array
          description: The loft users that belong to a team
          items:
            type: string
      description: LocalTeamStatus holds the status of a user access
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalUser:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalUserSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalUserStatus'
      description: LocalUser holds the cluster user information
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalUserSpec:
      type: object
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalUserStatus:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
          description: Annotations are the annotations of the user
        displayName:
          type: string
          description: The display name shown in the UI
        email:
          type: string
          description: The users email address
        groups:
          type: array
          description: The groups the user has access to
          items:
            type: string
        labels:
          type: object
          additionalProperties:
            type: string
          description: Labels are the labels of the user
        subject:
          type: string
          description: The user subject as presented by the token
        teams:
          type: array
          description: Teams the user is currently part of
          items:
            type: string
        username:
          type: string
          description: The username that is used to login
      description: LocalUserStatus holds the status of a user access
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.PodSelector:
      type: object
      properties:
        podSelector:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        port:
          type: integer
          description: The port of the pod to route to
          format: int32
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.SecretRef:
      type: object
      properties:
        key:
          type: string
        secretName:
          type: string
        secretNamespace:
          type: string
      description: SecretRef is the reference to a secret containing the user password
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.SpaceTemplate:
      type: object
      properties:
        clusterRole:
          type: string
          description: This defines the cluster role that will be used for the rolebinding
            when creating a new space for the selected subjects
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        objects:
          type: string
          description: Objects are Kubernetes style yamls that should get deployed
            into the space
      description: SpaceTemplate defines properties how many spaces can be owned by
        the account and how they should be created
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.UserOrTeam:
      type: object
      properties:
        team:
          type: string
          description: Name of a Loft team the user is part of
        user:
          type: string
          description: Name of a Loft user
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualCluster:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterStatus'
      description: VirtualCluster holds the information
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterHelmChart:
      type: object
      properties:
        name:
          type: string
          description: the name of the helm chart
        repo:
          type: string
          description: the repo of the helm chart
        version:
          type: string
          description: the version of the helm chart to use
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease:
      type: object
      properties:
        chart:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterHelmChart'
        values:
          type: string
          description: the values for the given chart
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterHelmReleaseStatus:
      type: object
      properties:
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        message:
          type: string
        phase:
          type: string
        reason:
          type: string
        release:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease'
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterSpec:
      type: object
      properties:
        helmRelease:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease'
        kubeConfigRef:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.SecretRef'
        pod:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.PodSelector'
    com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterStatus:
      type: object
      properties:
        conditions:
          type: array
          description: Conditions holds several conditions the virtual cluster might
            be in
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.Condition'
        controlPlaneReady:
          type: boolean
          description: ControlPlaneReady defines if the virtual cluster control plane
            is ready.
        helmRelease:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterHelmReleaseStatus'
        message:
          type: string
          description: Message describes the reason in human readable form why the
            cluster is in the currrent phase
        observedGeneration:
          type: integer
          description: ObservedGeneration is the latest generation observed by the
            controller.
          format: int64
        phase:
          type: string
          description: Phase describes the current phase the virtual cluster is in
        reason:
          type: string
          description: Reason describes the reason in machine readable form why the
            cluster is in the current phase
      description: VirtualClusterStatus holds the status of a virtual cluster
    com.github.loft-sh.api.pkg.apis.audit.v1.ObjectReference:
      type: object
      properties:
        apiGroup:
          type: string
          description: APIGroup is the name of the API group that contains the referred
            object. The empty string represents the core API group.
        apiVersion:
          type: string
          description: APIVersion is the version of the API group that contains the
            referred object.
        name:
          type: string
        namespace:
          type: string
        resource:
          type: string
        resourceVersion:
          type: string
        subresource:
          type: string
        uid:
          type: string
      description: ObjectReference contains enough information to let you inspect
        or modify the referred object.
    com.github.loft-sh.api.pkg.apis.management.v1.Analytics:
      type: object
      properties:
        batchEndpoint:
          type: string
        endpoint:
          type: string
        requests:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResoureRequests'
        token:
          type: string
    com.github.loft-sh.api.pkg.apis.management.v1.Announcement:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AnnouncementSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AnnouncementStatus'
      description: Announcement holds the announcement information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: Announcement
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.AnnouncementList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Announcement'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: AnnouncementList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.AnnouncementSpec:
      type: object
    com.github.loft-sh.api.pkg.apis.management.v1.AnnouncementStatus:
      type: object
      properties:
        analyticsToken:
          type: string
          description: AnalyticsToken is a token signed for the user that is used
            by the frontend
        announcement:
          type: string
          description: Announcement is the html announcement that should be displayed
            in the frontend
    com.github.loft-sh.api.pkg.apis.management.v1.App:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AppSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AppStatus'
      description: App holds the information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: App
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.AppList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.App'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: AppList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.AppSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        config:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.HelmReleaseSpec'
        description:
          type: string
          description: Description describes an app
        displayName:
          type: string
          description: DisplayName is the name that should be displayed in the UI
        helm:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.HelmConfiguration'
        icon:
          type: string
          description: Icon holds an URL to the app icon
        manifests:
          type: string
          description: 'DEPRECATED: Use config instead manifest represents kubernetes
            resources that will be deployed into the target namespace'
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
        parameters:
          type: array
          description: Parameters define additional app parameters that will set helm
            values
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AppParameter'
        readme:
          type: string
          description: Readme is a longer markdown string that describes the app.
        recommendedApp:
          type: array
          description: RecommendedApp specifies where this app should show up as recommended
            app
          items:
            type: string
        releaseName:
          type: string
          description: ReleaseName is the preferred release name of the app
        streamContainer:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.StreamContainer'
        timeout:
          type: string
          description: Timeout is the time to wait for any individual Kubernetes operation
            (like Jobs for hooks) (default 5m0s)
        wait:
          type: boolean
          description: Wait determines if Loft should wait during deploy for the app
            to become ready
      description: AppSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.AppStatus:
      type: object
      description: AppStatus holds the status
    com.github.loft-sh.api.pkg.apis.management.v1.Apps:
      type: object
      properties:
        noDefault:
          type: boolean
          description: If this option is true, loft will not try to parse the default
            apps
        predefinedApps:
          type: array
          description: Predefined apps that can be selected in the Spaces > Space
            menu
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.PredefinedApp'
        repositories:
          type: array
          description: These are additional repositories that are parsed by loft
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.HelmChartRepository'
      description: Apps holds configuration for apps that should be shown
    com.github.loft-sh.api.pkg.apis.management.v1.Audit:
      type: object
      properties:
        compress:
          type: boolean
          description: Compress determines if the rotated log files should be compressed
            using gzip. The default is not to perform compression.
        dataStoreEndpoint:
          type: string
          description: DataStoreEndpoint is an endpoint to store events in.
        dataStoreTTL:
          type: integer
          description: DataStoreMaxAge is the maximum number of hours to retain old
            log events in the datastore
          format: int32
        enabled:
          type: boolean
          description: If audit is enabled and incoming api requests will be logged
            based on the supplied policy.
        level:
          type: integer
          description: Level is an optional log level for audit logs. Cannot be used
            together with policy
          format: int32
        maxAge:
          type: integer
          description: MaxAge is the maximum number of days to retain old log files
            based on the timestamp encoded in their filename.  Note that a day is
            defined as 24 hours and may not exactly correspond to calendar days due
            to daylight savings, leap seconds, etc. The default is not to remove old
            log files based on age.
          format: int32
        maxBackups:
          type: integer
          description: MaxBackups is the maximum number of old log files to retain.  The
            default is to retain all old log files (though MaxAge may still cause
            them to get deleted.)
          format: int32
        maxSize:
          type: integer
          description: MaxSize is the maximum size in megabytes of the log file before
            it gets rotated. It defaults to 100 megabytes.
          format: int32
        path:
          type: string
          description: The path where to save the audit log files. This is required
            if audit is enabled. Backup log files will be retained in the same directory.
        policy:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuditPolicy'
      description: Audit holds the audit configuration options for loft. Changing
        any options will require a loft restart to take effect.
    com.github.loft-sh.api.pkg.apis.management.v1.AuditPolicy:
      type: object
      properties:
        omitStages:
          type: array
          description: OmitStages is a list of stages for which no events are created.
            Note that this can also be specified per rule in which case the union
            of both are omitted.
          items:
            type: string
        rules:
          type: array
          description: Rules specify the audit Level a request should be recorded
            at. A request may match multiple rules, in which case the FIRST matching
            rule is used. The default audit level is None, but can be overridden by
            a catch-all rule at the end of the list. PolicyRules are strictly ordered.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuditPolicyRule'
      description: AuditPolicy describes the audit policy to use for loft
    com.github.loft-sh.api.pkg.apis.management.v1.AuditPolicyRule:
      required:
      - level
      type: object
      properties:
        clusters:
          type: array
          description: Clusters that this rule matches. Only applies to cluster requests.
            If this is set, no events for non cluster requests will be created. An
            empty list means no restrictions will apply.
          items:
            type: string
        level:
          type: string
          description: The Level that requests matching this rule are recorded at.
        namespaces:
          type: array
          description: Namespaces that this rule matches. The empty string "" matches
            non-namespaced resources. An empty list implies every namespace.
          items:
            type: string
        nonResourceURLs:
          type: array
          description: |-
            NonResourceURLs is a set of URL paths that should be audited. *s are allowed, but only as the full, final step in the path. Examples:
             "/metrics" - Log requests for apiserver metrics
             "/healthz*" - Log all health checks
          items:
            type: string
        omitStages:
          type: array
          description: OmitStages is a list of stages for which no events are created.
            Note that this can also be specified policy wide in which case the union
            of both are omitted. An empty list means no restrictions will apply.
          items:
            type: string
        requestTargets:
          type: array
          description: RequestTargets is a list of request targets for which events
            are created. An empty list implies every request.
          items:
            type: string
        resources:
          type: array
          description: Resources that this rule matches. An empty list implies all
            kinds in all API groups.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.GroupResources'
        userGroups:
          type: array
          description: The user groups this rule applies to. A user is considered
            matching if it is a member of any of the UserGroups. An empty list implies
            every user group.
          items:
            type: string
        users:
          type: array
          description: The users (by authenticated user name) this rule applies to.
            An empty list implies every user.
          items:
            type: string
        verbs:
          type: array
          description: The verbs that match this rule. An empty list implies every
            verb.
          items:
            type: string
      description: AuditPolicy describes a policy for auditing
    com.github.loft-sh.api.pkg.apis.management.v1.Authentication:
      type: object
      properties:
        github:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGithub'
        gitlab:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGitlab'
        google:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGoogle'
        microsoft:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationMicrosoft'
        oidc:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationOIDC'
        password:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationPassword'
      description: Authentication holds authentication relevant information
    com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGithub:
      required:
      - clientSecret
      - redirectURI
      type: object
      properties:
        clientId:
          type: string
          description: ClientID holds the github client id
        clientSecret:
          type: string
          description: ClientID holds the github client secret
        clusterAccountTemplates:
          type: array
          description: Cluster Account Templates that will be applied for users logging
            in through this authentication
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplate'
        groupClusterAccountTemplates:
          type: array
          description: A mapping between groups and cluster account templates. If
            the user has a certain group, the cluster account template will be added
            during creation
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate'
        hostName:
          type: string
          description: Required ONLY for GitHub Enterprise. This is the Hostname of
            the GitHub Enterprise account listed on the management console. Ensure
            this domain is routable on your network.
        orgs:
          type: array
          description: |-
            Loft queries the following organizations for group information. Group claims are formatted as "(org):(team)". For example if a user is part of the "engineering" team of the "coreos" org, the group claim would include "coreos:engineering".

            If orgs are specified in the config then user MUST be a member of at least one of the specified orgs to authenticate with loft.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGithubOrg'
        redirectURI:
          type: string
          description: RedirectURI holds the redirect URI. Should be https://loft.domain.tld/auth/github/callback
        rootCA:
          type: string
          description: ONLY for GitHub Enterprise. Optional field. Used to support
            self-signed or untrusted CA root certificates.
    com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGithubOrg:
      type: object
      properties:
        name:
          type: string
          description: Organization name in github (not slug, full name). Only users
            in this github organization can authenticate.
        teams:
          type: array
          description: Names of teams in a github organization. A user will be able
            to authenticate if they are members of at least one of these teams. Users
            in the organization can authenticate if this field is omitted from the
            config file.
          items:
            type: string
      description: AuthenticationGithubOrg holds org-team filters, in which teams
        are optional.
    com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGitlab:
      required:
      - clientId
      - clientSecret
      - redirectURI
      type: object
      properties:
        baseURL:
          type: string
          description: BaseURL is optional, default = https://gitlab.com
        clientId:
          type: string
          description: Gitlab client id
        clientSecret:
          type: string
          description: Gitlab client secret
        clusterAccountTemplates:
          type: array
          description: Cluster Account Templates that will be applied for users logging
            in through this authentication
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplate'
        groupClusterAccountTemplates:
          type: array
          description: A mapping between groups and cluster account templates. If
            the user has a certain group, the cluster account template will be added
            during creation
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate'
        groups:
          type: array
          description: Optional groups whitelist, communicated through the "groups"
            scope. If `groups` is omitted, all of the user's GitLab groups are returned.
            If `groups` is provided, this acts as a whitelist - only the user's GitLab
            groups that are in the configured `groups` below will go into the groups
            claim. Conversely, if the user is not in any of the configured `groups`,
            the user will not be authenticated.
          items:
            type: string
        redirectURI:
          type: string
          description: Redirect URI
    com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGoogle:
      required:
      - clientId
      - clientSecret
      - redirectURI
      type: object
      properties:
        adminEmail:
          type: string
          description: Required if ServiceAccountFilePath The email of a GSuite super
            user which the service account will impersonate when listing groups
        clientId:
          type: string
          description: Google client id
        clientSecret:
          type: string
          description: Google client secret
        clusterAccountTemplates:
          type: array
          description: Cluster Account Templates that will be applied for users logging
            in through this authentication
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplate'
        groupClusterAccountTemplates:
          type: array
          description: A mapping between groups and cluster account templates. If
            the user has a certain group, the cluster account template will be added
            during creation
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate'
        groups:
          type: array
          description: Optional list of whitelisted groups If this field is nonempty,
            only users from a listed group will be allowed to log in
          items:
            type: string
        hostedDomains:
          type: array
          description: Optional list of whitelisted domains If this field is nonempty,
            only users from a listed domain will be allowed to log in
          items:
            type: string
        redirectURI:
          type: string
          description: loft redirect uri. E.g. https://loft.my.domain/auth/google/callback
        scopes:
          type: array
          description: defaults to "profile" and "email"
          items:
            type: string
        serviceAccountFilePath:
          type: string
          description: Optional path to service account json If nonempty, and groups
            claim is made, will use authentication from file to check groups with
            the admin directory api
    com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate:
      required:
      - group
      type: object
      properties:
        clusterAccountTemplates:
          type: array
          description: Cluster Account Templates that will be applied for users logging
            in through this authentication
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplate'
        group:
          type: string
          description: Group is the name of the group that should be matched
    com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationMicrosoft:
      required:
      - clientId
      - clientSecret
      - redirectURI
      type: object
      properties:
        clientId:
          type: string
          description: Microsoft client id
        clientSecret:
          type: string
          description: Microsoft client secret
        clusterAccountTemplates:
          type: array
          description: Cluster Account Templates that will be applied for users logging
            in through this authentication
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplate'
        groupClusterAccountTemplates:
          type: array
          description: A mapping between groups and cluster account templates. If
            the user has a certain group, the cluster account template will be added
            during creation
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate'
        groups:
          type: array
          description: It is possible to require a user to be a member of a particular
            group in order to be successfully authenticated in loft.
          items:
            type: string
        onlySecurityGroups:
          type: boolean
          description: configuration option restricts the list to include only security
            groups. By default all groups (security, Office 365, mailing lists) are
            included.
        redirectURI:
          type: string
          description: loft redirect uri. Usually https://loft.my.domain/auth/microsoft/callback
        tenant:
          type: string
          description: |-
            tenant configuration parameter controls what kinds of accounts may be authenticated in loft. By default, all types of Microsoft accounts (consumers and organizations) can authenticate in loft via Microsoft. To change this, set the tenant parameter to one of the following:

            common - both personal and business/school accounts can authenticate in loft via Microsoft (default) consumers - only personal accounts can authenticate in loft organizations - only business/school accounts can authenticate in loft <tenant uuid> or <tenant name> - only accounts belonging to specific tenant identified by either <tenant uuid> or <tenant name> can authenticate in loft
        useGroupsAsWhitelist:
          type: boolean
          description: Restrict the groups claims to include only the user’s groups
            that are in the configured groups
    com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationOIDC:
      type: object
      properties:
        caFile:
          type: string
          description: Path to a PEM encoded root certificate of the provider. Optional
        clientId:
          type: string
          description: |-
            ClientID the JWT must be issued for, the "sub" field. This plugin only trusts a single client to ensure the plugin can be used with public providers.

            The plugin supports the "authorized party" OpenID Connect claim, which allows specialized providers to issue tokens to a client for a different client. See: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
        clientSecret:
          type: string
          description: ClientSecret to issue tokens from the OIDC provider
        clusterAccountTemplates:
          type: array
          description: Cluster Account Templates that will be applied for users logging
            in through this authentication
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplate'
        getUserInfo:
          type: boolean
          description: GetUserInfo, if specified, tells the OIDCAuthenticator to try
            to populate the user's information from the UserInfo.
        groupClusterAccountTemplates:
          type: array
          description: A mapping between groups and cluster account templates. If
            the user has a certain group, the cluster account template will be added
            during creation
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate'
        groups:
          type: array
          description: If required groups is non empty, access is denied if the user
            is not part of at least one of the specified groups.
          items:
            type: string
        groupsClaim:
          type: string
          description: GroupsClaim, if specified, causes the OIDCAuthenticator to
            try to populate the user's groups with an ID Token field. If the GroupsClaim
            field is present in an ID Token the value must be a string or list of
            strings.
        groupsPrefix:
          type: string
          description: GroupsPrefix, if specified, causes claims mapping to group
            names to be prefixed with the value. A value "oidc:" would result in groups
            like "oidc:engineering" and "oidc:marketing".
        insecureCa:
          type: boolean
          description: Specify whether to communicate without validating SSL certificates
        issuerUrl:
          type: string
          description: |-
            IssuerURL is the URL the provider signs ID Tokens as. This will be the "iss" field of all tokens produced by the provider and is used for configuration discovery.

            The URL is usually the provider's URL without a path, for example "https://accounts.google.com" or "https://login.salesforce.com".

            The provider must implement configuration discovery. See: https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig
        redirectURI:
          type: string
          description: loft redirect uri. E.g. https://loft.my.domain/auth/oidc/callback
        type:
          type: string
          description: Type of the OIDC to show in the UI. Only for displaying purposes
        usernameClaim:
          type: string
          description: UsernameClaim is the JWT field to use as the user's username.
        usernamePrefix:
          type: string
          description: UsernamePrefix, if specified, causes claims mapping to username
            to be prefix with the provided value. A value "oidc:" would result in
            usernames like "oidc:john".
    com.github.loft-sh.api.pkg.apis.management.v1.AuthenticationPassword:
      type: object
      properties:
        disabled:
          type: boolean
          description: If true login via password is disabled
    com.github.loft-sh.api.pkg.apis.management.v1.Cluster:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterStatus'
      description: Cluster holds the cluster information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: Cluster
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccessSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccessStatus'
      description: ClusterAccess holds the globalClusterAccess information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterAccess
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccessList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccess'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterAccessList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccessSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        clusters:
          type: array
          description: Clusters are the clusters this template should be applied on.
          items:
            type: string
        description:
          type: string
          description: Description describes a cluster access object
        displayName:
          type: string
          description: DisplayName is the name that should be displayed in the UI
        localClusterAccessTemplate:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.LocalClusterAccessTemplate'
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
      description: ClusterAccessSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccessStatus:
      type: object
      properties:
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        spaceConstraint:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        users:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.UserOrTeam'
      description: ClusterAccessStatus holds the status
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplateSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplateStatus'
      description: ClusterAccountTemplate holds the clusterAccountTemplate information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterAccountTemplate
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplateList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplate'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterAccountTemplateList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplateSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        accountTemplate:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccountTemplate'
        clusterSelector:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        clusters:
          type: array
          description: Clusters are the clusters this template should be applied on.
          items:
            type: string
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
        owns:
          type: array
          description: Owns are resources that will be created in the target cluster
            for the account Furthermore the account will be added as owner reference
            in this resources.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.runtime.RawExtension'
      description: ClusterAccountTemplateSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccountTemplateStatus:
      type: object
      description: ClusterAccountTemplateStatus holds the status
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccounts:
      type: object
      properties:
        accounts:
          type: array
          description: Accounts are the accounts that belong to the user in the cluster
          items:
            type: string
        cluster:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Cluster'
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterCharts:
      required:
      - charts
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        busy:
          type: boolean
          description: Busy will indicate if the chart parsing is still in progress.
        charts:
          type: array
          description: Holds the available helm charts for this cluster
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.HelmChart'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterCharts
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnect:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnectSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnectStatus'
      description: ClusterConnect holds the information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterConnect
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnectSpec:
      type: object
      properties:
        adminUser:
          type: string
          description: The user to create an admin account for
        clusterTemplate:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
        config:
          type: string
          description: the kube config used to connect the cluster
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterConnectStatus:
      type: object
      properties:
        failed:
          type: boolean
        message:
          type: string
        reason:
          type: string
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterDomain:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        domain:
          type: string
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        target:
          type: string
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterDomain
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Cluster'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterMember:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterMemberAccess:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        teams:
          type: array
          description: Teams holds all the teams that the current user has access
            to the cluster
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterMember'
        users:
          type: array
          description: Users holds all the users that the current user has access
            to the cluster
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterMember'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterMemberAccess
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterMembers:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        teams:
          type: array
          description: Teams holds all the teams that have access to the cluster
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterMember'
        users:
          type: array
          description: Users holds all the users that have access to the cluster
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterMember'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterMembers
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterReset:
      type: object
      properties:
        agent:
          type: boolean
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        rbac:
          type: boolean
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterReset
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplateSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplateStatus'
      description: ClusterRoleTemplate holds the clusterRoleTemplate information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterRoleTemplate
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplateList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplate'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterRoleTemplateList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplateSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        clusters:
          type: array
          description: Clusters are the clusters this template should be applied on.
          items:
            type: string
        description:
          type: string
          description: Description describes a cluster role template object
        displayName:
          type: string
          description: DisplayName is the name that should be displayed in the UI
        localClusterRoleTemplate:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.LocalClusterRoleTemplate'
        management:
          type: boolean
          description: Management defines if this cluster role should be created in
            the management instance.
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
      description: ClusterRoleTemplateSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterRoleTemplateStatus:
      type: object
      properties:
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
      description: ClusterRoleTemplateStatus holds the status
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        config:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.SecretRef'
        description:
          type: string
          description: Description describes a cluster access object
        displayName:
          type: string
          description: If specified this name is displayed in the UI instead of the
            metadata name
        local:
          type: boolean
          description: Local specifies if it is the local cluster that should be connected,
            when this is specified, config is optional
        managementNamespace:
          type: string
          description: The namespace where the cluster components will be installed
            in
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
      description: ClusterSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterStatus:
      type: object
      properties:
        message:
          type: string
        phase:
          type: string
        reason:
          type: string
      description: ClusterStatus holds the status
    com.github.loft-sh.api.pkg.apis.management.v1.ClusterVirtualClusterDefaults:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        defaultTemplate:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplate'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        latestVersion:
          type: string
          description: LatestVersion is the latest virtual cluster version
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        values:
          type: string
          description: Default values for the virtual cluster chart
        warning:
          type: string
          description: Warning should be somehow shown to the user when there is a
            problem retrieving the defaults
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ClusterVirtualClusterDefaults
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.Config:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ConfigSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ConfigStatus'
      description: Config holds the loft configuration
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: Config
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ConfigList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Config'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ConfigList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ConfigSpec:
      type: object
      properties:
        raw:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: Raw holds the raw config
          format: byte
      description: ConfigSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.ConfigStatus:
      type: object
      properties:
        apps:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Apps'
        audit:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Audit'
        auth:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Authentication'
        oidc:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OIDC'
      description: ConfigStatus holds the status, which is the parsed raw config
    com.github.loft-sh.api.pkg.apis.management.v1.CustomerInfo:
      required:
      - created
      type: object
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        company:
          type: string
        country:
          type: string
        created:
          type: integer
          format: int64
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        postalCode:
          type: string
    com.github.loft-sh.api.pkg.apis.management.v1.DefaultPaymentMethod:
      required:
      - card
      type: object
      properties:
        card:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.DefaultPaymentMethodCard'
    com.github.loft-sh.api.pkg.apis.management.v1.DefaultPaymentMethodCard:
      required:
      - brand
      - expMonth
      - expYear
      - funding
      - last4
      type: object
      properties:
        brand:
          type: string
        expMonth:
          type: integer
          format: int64
        expYear:
          type: integer
          format: int64
        funding:
          type: string
        last4:
          type: string
    com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointToken:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointTokenSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointTokenStatus'
      description: DirectClusterEndpointToken holds the object information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: DirectClusterEndpointToken
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointTokenSpec:
      type: object
      description: DirectClusterEndpointTokenSpec holds the object specification
    com.github.loft-sh.api.pkg.apis.management.v1.DirectClusterEndpointTokenStatus:
      type: object
      properties:
        token:
          type: string
      description: DirectClusterEndpointTokenStatus holds the object status
    com.github.loft-sh.api.pkg.apis.management.v1.Event:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.EventSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.EventStatus'
      description: Event holds an event
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: Event
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.EventList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Event'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: EventList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.EventSpec:
      type: object
      description: EventSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.EventStatus:
      required:
      - auditID
      - level
      - requestURI
      - stage
      - user
      - verb
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
          description: Annotations is an unstructured key value map stored with an
            audit event that may be set by plugins invoked in the request serving
            chain, including authentication, authorization and admission plugins.
            Note that these annotations are for the audit event, and do not correspond
            to the metadata.annotations of the submitted object. Keys should uniquely
            identify the informing component to avoid name collisions (e.g. podsecuritypolicy.admission.k8s.io/policy).
            Values should be short. Annotations are included in the Metadata level.
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        auditID:
          type: string
          description: Unique audit ID, generated for each request.
        impersonatedUser:
          $ref: '#/components/schemas/io.k8s.api.authentication.v1.UserInfo'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        level:
          type: string
          description: AuditLevel at which event was generated
        objectRef:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.audit.v1.ObjectReference'
        requestObject:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.runtime.Unknown'
        requestReceivedTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        requestURI:
          type: string
          description: RequestURI is the request URI as sent by the client to a server.
        responseObject:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.runtime.Unknown'
        responseStatus:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        sourceIPs:
          type: array
          description: Source IPs, from where the request originated and intermediate
            proxies.
          items:
            type: string
        stage:
          type: string
          description: Stage of the request handling when this event instance was
            generated.
        stageTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        user:
          $ref: '#/components/schemas/io.k8s.api.authentication.v1.UserInfo'
        userAgent:
          type: string
          description: UserAgent records the user agent string reported by the client.
            Note that the UserAgent is provided by the client, and must not be trusted.
        verb:
          type: string
          description: Verb is the kubernetes verb associated with the request. For
            non-resource requests, this is the lower-cased HTTP method.
      description: EventStatus holds the status, which is the parsed raw config
    com.github.loft-sh.api.pkg.apis.management.v1.Feature:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.FeatureSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.FeatureStatus'
      description: User holds the user information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: Feature
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.FeatureList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Feature'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: FeatureList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.FeatureSpec:
      type: object
      description: FeatureSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.FeatureStatus:
      type: object
      properties:
        enabled:
          type: boolean
          description: Enabled signals if the feature is currently enabled or disabled
      description: FeatureStatus holds the status
    com.github.loft-sh.api.pkg.apis.management.v1.GroupResources:
      type: object
      properties:
        group:
          type: string
          description: Group is the name of the API group that contains the resources.
            The empty string represents the core API group.
        resourceNames:
          type: array
          description: ResourceNames is a list of resource instance names that the
            policy matches. Using this field requires Resources to be specified. An
            empty list implies that every instance of the resource is matched.
          items:
            type: string
        resources:
          type: array
          description: |-
            Resources is a list of resources this rule applies to.

            For example: 'pods' matches pods. 'pods/log' matches the log subresource of pods. '*' matches all resources and their subresources. 'pods/*' matches all subresources of pods. '*/scale' matches all scale subresources.

            If wildcard is present, the validation rule will ensure resources do not overlap with each other.

            An empty list implies all resources and subresources in this API groups apply.
          items:
            type: string
      description: GroupResources represents resource kinds in an API group.
    com.github.loft-sh.api.pkg.apis.management.v1.Kiosk:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.KioskSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.KioskStatus'
      description: Kiosk holds the kiosk types
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: Kiosk
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.KioskSpec:
      type: object
      properties:
        chartInfo:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ChartInfo'
        clusterQuota:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.ClusterQuota'
        configAccount:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.Account'
        helmRelease:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.HelmRelease'
        jsPolicy:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicy'
        jsPolicyBundle:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundle'
        jsPolicyViolations:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolations'
        localClusterAccess:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.LocalClusterAccess'
        localClusterRoleTemplate:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterRoleTemplate'
        localSpaceConstraint:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalSpaceConstraint'
        localStorageClusterAccess:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterAccess'
        localTeam:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalTeam'
        localUser:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalUser'
        sleepModeConfig:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.SleepModeConfig'
        space:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Space'
        storageClusterQuota:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterQuota'
        storageVirtualCluster:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualCluster'
        template:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.Template'
        templateInstance:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.TemplateInstance'
        virtualCluster:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.VirtualCluster'
    com.github.loft-sh.api.pkg.apis.management.v1.KioskStatus:
      type: object
    com.github.loft-sh.api.pkg.apis.management.v1.License:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseStatus'
      description: License holds the license information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: License
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.LicenseInfo:
      required:
      - currentTime
      - quantity
      type: object
      properties:
        analytics:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Analytics'
        announcement:
          type: string
        baseDomains:
          type: array
          items:
            type: string
        blockRequests:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResoureRequests'
        currentTime:
          type: integer
          format: int64
        customer:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.CustomerInfo'
        features:
          type: object
          additionalProperties:
            type: boolean
        license:
          type: string
        links:
          type: object
          additionalProperties:
            type: string
        plan:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Plan'
        promotions:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Promotions'
        quantity:
          type: integer
          format: int64
        resourceLimits:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResourceLimit'
        subscription:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SubscriptionInfo'
    com.github.loft-sh.api.pkg.apis.management.v1.LicenseList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.License'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: LicenseList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.LicenseSpec:
      type: object
    com.github.loft-sh.api.pkg.apis.management.v1.LicenseStatus:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseInfo'
        instance:
          type: string
    com.github.loft-sh.api.pkg.apis.management.v1.LicenseToken:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseTokenSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LicenseTokenStatus'
      description: License Token holds the license token information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: LicenseToken
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.LicenseTokenSpec:
      type: object
    com.github.loft-sh.api.pkg.apis.management.v1.LicenseTokenStatus:
      type: object
      properties:
        token:
          type: string
          description: Token is the generated token
    com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgrade:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgradeSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgradeStatus'
      description: LoftUpgrade holds the upgrade information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: LoftUpgrade
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgradeSpec:
      type: object
      properties:
        namespace:
          type: string
          description: If specified, updated the release in the given namespace
        release:
          type: string
          description: If specified, uses this as release name
        version:
          type: string
    com.github.loft-sh.api.pkg.apis.management.v1.LoftUpgradeStatus:
      type: object
    com.github.loft-sh.api.pkg.apis.management.v1.OIDC:
      type: object
      properties:
        clients:
          type: array
          description: The clients that are allowed to request loft tokens
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OIDCClient'
        enabled:
          type: boolean
          description: If true indicates that loft will act as an OIDC server
      description: OIDC holds oidc provider relevant information
    com.github.loft-sh.api.pkg.apis.management.v1.OIDCClient:
      required:
      - redirectURIs
      type: object
      properties:
        clientId:
          type: string
          description: The client id of the client
        clientSecret:
          type: string
          description: The client secret of the client
        name:
          type: string
          description: The client name
        redirectURIs:
          type: array
          description: A registered set of redirect URIs. When redirecting from dex
            to the client, the URI requested to redirect to MUST match one of these
            values, unless the client is "public".
          items:
            type: string
      description: OIDCClient holds information about a client
    com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKeySpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKeyStatus'
      description: OwnedAccessKey is an access key that is owned by the current user
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: OwnedAccessKey
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKeySpec:
      type: object
      properties:
        disabled:
          type: boolean
          description: If this field is true, the access key is still allowed to exist,
            however will not work to access the api
        displayName:
          type: string
          description: The display name shown in the UI
        identity:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyIdentity'
        identityRefresh:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        key:
          type: string
          description: The actual access key that will be used as a bearer token
        oidcLogin:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyOIDC'
        oidcProvider:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyOIDCProvider'
        parent:
          type: string
          description: |-
            DEPRECATED: do not use anymore Parent is used to share OIDC and external token information with multiple access keys. Since copying an OIDC refresh token would result in the other access keys becoming invalid after a refresh parent allows access keys to share that information.

            The use case for this is primarily user generated access keys, which will have the users current access key as parent if it contains an OIDC token.
        scope:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyScope'
        team:
          type: string
          description: The team this access key refers to
        ttl:
          type: integer
          description: The time to life for this access key
          format: int64
        ttlAfterLastActivity:
          type: boolean
          description: If this is specified, the time to life for this access key
            will start after the lastActivity instead of creation timestamp
        type:
          type: string
          description: The type of an access key, which basically describes if the
            access key is user managed or managed by loft itself.
        user:
          type: string
          description: The user this access key refers to
    com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKeyStatus:
      type: object
      properties:
        lastActivity:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
    com.github.loft-sh.api.pkg.apis.management.v1.Plan:
      required:
      - currency
      - interval
      - product
      type: object
      properties:
        currency:
          type: string
        interval:
          type: string
        price:
          type: integer
          format: int64
        product:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.PlanProduct'
    com.github.loft-sh.api.pkg.apis.management.v1.PlanProduct:
      required:
      - name
      - unitLabel
      type: object
      properties:
        name:
          type: string
        unitLabel:
          type: string
    com.github.loft-sh.api.pkg.apis.management.v1.PolicyViolation:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.PolicyViolationSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.PolicyViolationStatus'
      description: PolicyViolation
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: PolicyViolation
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.PolicyViolationList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.PolicyViolation'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: PolicyViolationList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.PolicyViolationSpec:
      type: object
    com.github.loft-sh.api.pkg.apis.management.v1.PolicyViolationStatus:
      type: object
      properties:
        cluster:
          type: string
          description: Cluster is the cluster where the violation occurred in
        policy:
          type: string
          description: Policy is the name of the policy where the violation occurred
        user:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        violation:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.PolicyViolation'
    com.github.loft-sh.api.pkg.apis.management.v1.PredefinedApp:
      required:
      - chart
      type: object
      properties:
        chart:
          type: string
          description: Chart holds the repo/chart name of the predefined app
        clusters:
          type: array
          description: Holds the cluster names where to display this app
          items:
            type: string
        iconUrl:
          type: string
          description: IconURL specifies an url to the icon that should be displayed
            for this app. If none is specified the icon from the chart metadata is
            used.
        initialValues:
          type: string
          description: InitialValues holds the initial values for this app. The values
            will be prefilled automatically. There are certain placeholders that can
            be used within the values that are replaced by the loft UI automatically.
        initialVersion:
          type: string
          description: InitialVersion holds the initial version of this app. This
            version will be selected automatically.
        readmeUrl:
          type: string
          description: ReadmeURL specifies an url to the readme page of this predefined
            app. If empty an url will be constructed to artifact hub.
        title:
          type: string
          description: Title is the name that should be displayed for the predefined
            app. If empty the chart name is used.
      description: PredefinedApp holds information about a predefined app
    com.github.loft-sh.api.pkg.apis.management.v1.Promotions:
      type: object
      properties:
        trial:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TrialPromotion'
    com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKey:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKeySpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKeyStatus'
      description: ResetAccessKey is an access key that is owned by another user
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: ResetAccessKey
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKeySpec:
      type: object
      properties:
        disabled:
          type: boolean
          description: If this field is true, the access key is still allowed to exist,
            however will not work to access the api
        displayName:
          type: string
          description: The display name shown in the UI
        identity:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyIdentity'
        identityRefresh:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        key:
          type: string
          description: The actual access key that will be used as a bearer token
        oidcLogin:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyOIDC'
        oidcProvider:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyOIDCProvider'
        parent:
          type: string
          description: |-
            DEPRECATED: do not use anymore Parent is used to share OIDC and external token information with multiple access keys. Since copying an OIDC refresh token would result in the other access keys becoming invalid after a refresh parent allows access keys to share that information.

            The use case for this is primarily user generated access keys, which will have the users current access key as parent if it contains an OIDC token.
        scope:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyScope'
        team:
          type: string
          description: The team this access key refers to
        ttl:
          type: integer
          description: The time to life for this access key
          format: int64
        ttlAfterLastActivity:
          type: boolean
          description: If this is specified, the time to life for this access key
            will start after the lastActivity instead of creation timestamp
        type:
          type: string
          description: The type of an access key, which basically describes if the
            access key is user managed or managed by loft itself.
        user:
          type: string
          description: The user this access key refers to
    com.github.loft-sh.api.pkg.apis.management.v1.ResetAccessKeyStatus:
      type: object
      properties:
        lastActivity:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
    com.github.loft-sh.api.pkg.apis.management.v1.ResourceLimit:
      type: object
      properties:
        acrossAllClusters:
          type: boolean
        blockRequests:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ResoureRequests'
        group:
          type: string
        kind:
          type: string
        limit:
          type: integer
          format: int64
        version:
          type: string
    com.github.loft-sh.api.pkg.apis.management.v1.ResoureRequests:
      type: object
      properties:
        group:
          type: string
        management:
          type: boolean
        resource:
          type: string
        verbs:
          type: array
          items:
            type: string
    com.github.loft-sh.api.pkg.apis.management.v1.Self:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SelfSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SelfStatus'
      description: Self holds information about the currently logged in user
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: Self
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.SelfSpec:
      type: object
    com.github.loft-sh.api.pkg.apis.management.v1.SelfStatus:
      type: object
      properties:
        accessKey:
          type: string
          description: The name of the currently used access key
        accessKeyType:
          type: string
          description: The type of the currently used access key
        groups:
          type: array
          description: The groups of the currently logged in user
          items:
            type: string
        subject:
          type: string
          description: The subject of the currently logged in user
        team:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        user:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserInfo'
    com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReview:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReviewSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReviewStatus'
      description: User holds the user information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: SelfSubjectAccessReview
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReviewSpec:
      type: object
      properties:
        nonResourceAttributes:
          $ref: '#/components/schemas/io.k8s.api.authorization.v1.NonResourceAttributes'
        resourceAttributes:
          $ref: '#/components/schemas/io.k8s.api.authorization.v1.ResourceAttributes'
    com.github.loft-sh.api.pkg.apis.management.v1.SelfSubjectAccessReviewStatus:
      required:
      - allowed
      type: object
      properties:
        allowed:
          type: boolean
          description: Allowed is required. True if the action would be allowed, false
            otherwise.
        denied:
          type: boolean
          description: Denied is optional. True if the action would be denied, otherwise
            false. If both allowed is false and denied is false, then the authorizer
            has no opinion on whether to authorize the action. Denied may not be true
            if Allowed is true.
        evaluationError:
          type: string
          description: EvaluationError is an indication that some error occurred during
            the authorization check. It is entirely possible to get an error and be
            able to continue determine authorization status in spite of it. For instance,
            RBAC can be missing a role, but enough roles are still present and bound
            to reason about the request.
        reason:
          type: string
          description: Reason is optional.  It indicates why a request was allowed
            or denied.
    com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecretSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecretStatus'
      description: SharedSecret holds the secret information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: SharedSecret
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.SharedSecretList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SharedSecret'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: SharedSecretList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.SharedSecretSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams which will
            be transformed to Roles and RoleBindings
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        data:
          type: object
          additionalProperties:
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
            format: byte
          description: Data contains the secret data. Each key must consist of alphanumeric
            characters, '-', '_' or '.'. The serialized form of the secret data is
            a base64 encoded string, representing the arbitrary (possibly non-string)
            data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
        description:
          type: string
          description: Description describes a shared secret
        displayName:
          type: string
          description: DisplayName is the name that should be displayed in the UI
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
      description: SharedSecretSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.SharedSecretStatus:
      type: object
      description: SharedSecretStatus holds the status
    com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraintSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraintStatus'
      description: SpaceConstraint holds the globalSpaceConstraint information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: SpaceConstraint
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraintList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraint'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: SpaceConstraintList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraintSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        clusters:
          type: array
          description: Clusters are the clusters this template should be applied on.
          items:
            type: string
        description:
          type: string
          description: Description describes a space constraint object
        displayName:
          type: string
          description: DisplayName is the name that should be displayed in the UI
        localSpaceConstraintTemplate:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.LocalSpaceConstraintTemplate'
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
      description: SpaceConstraintSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.SpaceConstraintStatus:
      type: object
      properties:
        clusterRole:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
      description: SpaceConstraintStatus holds the status
    com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplateSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplateStatus'
      description: SpaceTemplate holds the information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: SpaceTemplate
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplateList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplate'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: SpaceTemplateList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplateSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        description:
          type: string
          description: Description describes the space template
        displayName:
          type: string
          description: DisplayName is the name that is shown in the UI
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
        template:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.SpaceTemplateDefinition'
      description: SpaceTemplateSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.SpaceTemplateStatus:
      type: object
      properties:
        apps:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
      description: SpaceTemplateStatus holds the status
    com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReview:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReviewSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReviewStatus'
      description: User holds the user information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: SubjectAccessReview
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReviewSpec:
      type: object
      properties:
        extra:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Extra corresponds to the user.Info.GetExtra() method from the
            authenticator.  Since that is input to the authorizer it needs a reflection
            here.
        groups:
          type: array
          description: Groups is the groups you're testing for.
          items:
            type: string
        nonResourceAttributes:
          $ref: '#/components/schemas/io.k8s.api.authorization.v1.NonResourceAttributes'
        resourceAttributes:
          $ref: '#/components/schemas/io.k8s.api.authorization.v1.ResourceAttributes'
        uid:
          type: string
          description: UID information about the requesting user.
        user:
          type: string
          description: User is the user you're testing for. If you specify "User"
            but not "Groups", then is it interpreted as "What if User were not a member
            of any groups
    com.github.loft-sh.api.pkg.apis.management.v1.SubjectAccessReviewStatus:
      required:
      - allowed
      type: object
      properties:
        allowed:
          type: boolean
          description: Allowed is required. True if the action would be allowed, false
            otherwise.
        denied:
          type: boolean
          description: Denied is optional. True if the action would be denied, otherwise
            false. If both allowed is false and denied is false, then the authorizer
            has no opinion on whether to authorize the action. Denied may not be true
            if Allowed is true.
        evaluationError:
          type: string
          description: EvaluationError is an indication that some error occurred during
            the authorization check. It is entirely possible to get an error and be
            able to continue determine authorization status in spite of it. For instance,
            RBAC can be missing a role, but enough roles are still present and bound
            to reason about the request.
        reason:
          type: string
          description: Reason is optional.  It indicates why a request was allowed
            or denied.
    com.github.loft-sh.api.pkg.apis.management.v1.SubscriptionInfo:
      required:
      - created
      - currentPeriodEnd
      - nextInvoice
      - status
      - trialEnd
      type: object
      properties:
        created:
          type: integer
          format: int64
        currentPeriodEnd:
          type: integer
          format: int64
        defaultPaymentMethod:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.DefaultPaymentMethod'
        nextInvoice:
          type: integer
          format: int64
        status:
          type: string
        trialEnd:
          type: integer
          format: int64
    com.github.loft-sh.api.pkg.apis.management.v1.Task:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TaskSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TaskStatus'
      description: Task holds the Task information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: Task
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.TaskList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Task'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: TaskList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.TaskLog:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: TaskLog
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.TaskSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        displayName:
          type: string
          description: DisplayName is the name that should be displayed in the UI
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
        scope:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyScope'
        target:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Target'
        task:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.TaskDefinition'
      description: TaskSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.TaskStatus:
      type: object
      properties:
        cluster:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        conditions:
          type: array
          description: Conditions holds several conditions the virtual cluster might
            be in
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.Condition'
        containerState:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStatus'
        observedGeneration:
          type: integer
          description: ObservedGeneration is the latest generation observed by the
            controller.
          format: int64
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.UserOrTeam'
        podPhase:
          type: string
          description: PodPhase describes the phase this task is in
        started:
          type: boolean
          description: Started determines if the task was started
      description: TaskStatus holds the status
    com.github.loft-sh.api.pkg.apis.management.v1.Team:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TeamSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.TeamStatus'
      description: Team holds the team information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: Team
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.TeamAccessKeys:
      type: object
      properties:
        accessKeys:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: TeamAccessKeys
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.TeamClusters:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccounts'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: TeamClusters
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.TeamList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.Team'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: TeamList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.TeamSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        clusterAccountTemplates:
          type: array
          description: ClusterAccountTemplates that should be applied for the user
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplate'
        clusterRoles:
          type: array
          description: ClusterRoles define the cluster roles that the users should
            have assigned in the cluster.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterRoleRef'
        description:
          type: string
          description: Description describes a cluster access object
        displayName:
          type: string
          description: The display name shown in the UI
        groups:
          type: array
          description: The groups defined in a token that belong to a team
          items:
            type: string
        imagePullSecrets:
          type: array
          description: ImagePullSecrets holds secret references to image pull secrets
            the team has access to.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.KindSecretRef'
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
        username:
          type: string
          description: The username of the team that will be used for identification
            and docker registry namespace
        users:
          type: array
          description: The loft users that belong to a team
          items:
            type: string
    com.github.loft-sh.api.pkg.apis.management.v1.TeamStatus:
      type: object
      properties:
        clusterAccountTemplates:
          type: array
          description: 'ClusterAccountTemplates holds information about which cluster
            account templates were applied DEPRECATED: Use status.clusters instead'
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplateStatus'
        clusters:
          type: array
          description: Clusters holds information about which clusters the user has
            accounts in
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccountClusterStatus'
    com.github.loft-sh.api.pkg.apis.management.v1.TrialPromotion:
      required:
      - description
      - link
      - product
      type: object
      properties:
        description:
          type: string
        link:
          type: string
        product:
          type: string
    com.github.loft-sh.api.pkg.apis.management.v1.User:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.UserStatus'
      description: User holds the user information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: User
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.UserAccessKeys:
      type: object
      properties:
        accessKeys:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.OwnedAccessKey'
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: UserAccessKeys
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.UserClusters:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.ClusterAccounts'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: UserClusters
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.UserInfo:
      type: object
      properties:
        displayName:
          type: string
          description: The display name shown in the UI
        email:
          type: string
          description: The users email address
        name:
          type: string
          description: Name is the kubernetes name of the object
        subject:
          type: string
          description: The user subject
        teams:
          type: array
          description: Teams are the teams the user is part of
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
        username:
          type: string
          description: The username that is used to login
    com.github.loft-sh.api.pkg.apis.management.v1.UserList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.User'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: UserList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.UserProfile:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        custom:
          type: string
          description: Custom is custom information that should be saved of the user
        displayName:
          type: string
          description: The new display name shown in the UI
        email:
          type: string
          description: Email is the new email of the user
        icon:
          type: string
          description: Icon is the new icon of the user
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        password:
          type: string
          description: Password is the new password of the user
        username:
          type: string
          description: Username is the new username of the user
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: UserProfile
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.UserSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        accessKeysRef:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.SecretRef'
        clusterAccountTemplates:
          type: array
          description: ClusterAccountTemplates that should be applied for the user
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplate'
        clusterRoles:
          type: array
          description: ClusterRoles define the cluster roles that the users should
            have assigned in the cluster.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.ClusterRoleRef'
        codesRef:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.SecretRef'
        description:
          type: string
          description: Description describes a cluster access object
        disabled:
          type: boolean
          description: If disabled is true, an user will not be able to login anymore.
            All other user resources are unaffected and other users can still interact
            with this user
        displayName:
          type: string
          description: The display name shown in the UI
        email:
          type: string
          description: The users email address
        groups:
          type: array
          description: The groups the user has access to
          items:
            type: string
        icon:
          type: string
          description: The URL to an icon that should be shown for the user
        imagePullSecrets:
          type: array
          description: ImagePullSecrets holds secret references to image pull secrets
            the user has access to.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.KindSecretRef'
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
        passwordRef:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.SecretRef'
        subject:
          type: string
          description: The user subject as presented by the token
        tokenGeneration:
          type: integer
          description: TokenGeneration can be used to invalidate all user tokens
          format: int64
        username:
          type: string
          description: The username that is used to login
    com.github.loft-sh.api.pkg.apis.management.v1.UserStatus:
      type: object
      properties:
        clusterAccountTemplates:
          type: array
          description: 'ClusterAccountTemplates holds information about which cluster
            account templates were applied DEPRECATED: Use status.clusters instead'
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplateStatus'
        clusters:
          type: array
          description: Clusters holds information about which clusters the user has
            accounts in
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccountClusterStatus'
        teams:
          type: array
          description: Teams the user is currently part of
          items:
            type: string
      description: UserStatus holds the status of an user
    com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplateSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplateStatus'
      description: VirtualClusterTemplate holds the information
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: VirtualClusterTemplate
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplateList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplate'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: VirtualClusterTemplateList
        version: v1
    com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplateSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        description:
          type: string
          description: Description describes the virtual cluster template
        displayName:
          type: string
          description: DisplayName is the name that is shown in the UI
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
        spaceTemplateRef:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplateSpaceTemplateRef'
        template:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplateDefinition'
      description: VirtualClusterTemplateSpec holds the specification
    com.github.loft-sh.api.pkg.apis.management.v1.VirtualClusterTemplateStatus:
      type: object
      properties:
        apps:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.EntityInfo'
      description: VirtualClusterTemplateStatus holds the status
    com.github.loft-sh.api.pkg.apis.storage.v1.Access:
      required:
      - verbs
      type: object
      properties:
        subresources:
          type: array
          description: Subresources defines the sub resources that are allowed by
            this access rule
          items:
            type: string
        teams:
          type: array
          description: Teams specifies which teams should be able to access this secret
            with the aforementioned verbs
          items:
            type: string
        users:
          type: array
          description: Users specifies which users should be able to access this secret
            with the aforementioned verbs
          items:
            type: string
        verbs:
          type: array
          description: Verbs is a list of Verbs that apply to ALL the ResourceKinds
            and AttributeRestrictions contained in this rule. VerbAll represents all
            kinds.
          items:
            type: string
      description: Access describes the access to a secret
    com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyIdentity:
      type: object
      properties:
        ConnectorData:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: |-
            ConnectorData holds data used by the connector for subsequent requests after initial authentication, such as access tokens for upstream providers.

            This data is never shared with end users, OAuth clients, or through the API.
          format: byte
        Email:
          type: string
          description: The user email
        EmailVerified:
          type: boolean
          description: If the user email was verified
        Groups:
          type: array
          description: The groups from the identity provider
          items:
            type: string
        preferredUsername:
          type: string
          description: The preferred username / display name
        userId:
          type: string
          description: The subject of the user
        username:
          type: string
          description: The username
    com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyOIDC:
      type: object
      properties:
        accessToken:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: The current access token that was created during login
          format: byte
        idToken:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: The current id token that was created during login
          format: byte
        lastRefresh:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        refreshToken:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: The current refresh token that was created during login
          format: byte
    com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyOIDCProvider:
      type: object
      properties:
        clientId:
          type: string
          description: ClientId the token was generated for
        nonce:
          type: string
          description: Nonce to use
        redirectUri:
          type: string
          description: RedirectUri to use
        scopes:
          type: string
          description: Scopes to use
    com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyScope:
      type: object
      properties:
        rules:
          type: array
          description: Rules specifies the rules that should apply to the access key.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyScopeRule'
    com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyScopeRule:
      type: object
      properties:
        cluster:
          type: string
          description: Cluster that this rule matches. Only applies to cluster requests.
            If this is set, no requests for non cluster requests are allowed. An empty
            cluster means no restrictions will apply.
        namespaces:
          type: array
          description: Namespaces that this rule matches. The empty string "" matches
            non-namespaced resources. An empty list implies every namespace.
          items:
            type: string
        nonResourceURLs:
          type: array
          description: |-
            NonResourceURLs is a set of URL paths that should be checked. *s are allowed, but only as the full, final step in the path. Examples:
             "/metrics" - Log requests for apiserver metrics
             "/healthz*" - Log all health checks
          items:
            type: string
        requestTargets:
          type: array
          description: RequestTargets is a list of request targets that are allowed.
            An empty list implies every request.
          items:
            type: string
        resources:
          type: array
          description: Resources that this rule matches. An empty list implies all
            kinds in all API groups.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.GroupResources'
        verbs:
          type: array
          description: The verbs that match this rule. An empty list implies every
            verb.
          items:
            type: string
        virtualClusters:
          type: array
          description: VirtualClusters that this rule matches. Only applies to virtual
            cluster requests. An empty list means no restrictions will apply.
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyVirtualCluster'
      description: AccessKeyScopeRule describes a rule for the access key
    com.github.loft-sh.api.pkg.apis.storage.v1.AccessKeyVirtualCluster:
      type: object
      properties:
        name:
          type: string
          description: Name of the virtual cluster. Empty means all virtual clusters.
        namespace:
          type: string
          description: Namespace of the virtual cluster. Empty means all namespaces.
    com.github.loft-sh.api.pkg.apis.storage.v1.AccountClusterStatus:
      type: object
      properties:
        accounts:
          type: array
          description: Accounts is the account name of the user in the cluster
          items:
            type: string
        accountsClusterTemplateStatus:
          type: array
          description: AccountsClusterTemplate status is the status of the account
            cluster template that was used to create the cluster account
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.AccountClusterTemplateStatus'
        cluster:
          type: string
          description: Cluster is the cluster name of the user in the cluster
        message:
          type: string
          description: Message describes why loft couldn't sync the account in human
            language
        phase:
          type: string
          description: Status holds the status of the account in the target cluster
        reason:
          type: string
          description: Reason describes why loft couldn't sync the account with a
            machine readable identifier
      description: AccountClusterStatus holds the status of an account in a cluster
    com.github.loft-sh.api.pkg.apis.storage.v1.AccountClusterTemplateStatus:
      type: object
      properties:
        account:
          type: string
          description: Account is the name of the account in the cluster
        accountTemplateHash:
          type: string
          description: AccountTemplateHash is the hash of the account template that
            was applied
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        message:
          type: string
          description: Message describes why loft couldn't sync the account in human
            language
        name:
          type: string
          description: Name is the name of the cluster account template
        ownsHash:
          type: string
          description: OwnsHash is the hash of the owns part of the cluster account
            template that was applied
        phase:
          type: string
          description: Status holds the status of the account in the target cluster
        reason:
          type: string
          description: Reason describes why loft couldn't sync the account with a
            machine readable identifier
    com.github.loft-sh.api.pkg.apis.storage.v1.AccountTemplate:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.kiosk.config.v1alpha1.AccountSpec'
    com.github.loft-sh.api.pkg.apis.storage.v1.AppParameter:
      type: object
      properties:
        defaultValue:
          type: string
          description: DefaultValue is the default value if none is specified
        description:
          type: string
          description: Description is the description to show for this parameter
        invalidation:
          type: string
          description: Invalidation regex that if matched will reject the input
        label:
          type: string
          description: Label is the label to show for this parameter
        max:
          type: integer
          description: Max is the maximum number if type is number
          format: int32
        min:
          type: integer
          description: Min is the minimum number if type is number
          format: int32
        options:
          type: array
          description: Options are the options if type is enum
          items:
            type: string
        placeholder:
          type: string
          description: Placeholder shown in the UI
        required:
          type: boolean
          description: Required specifies if this parameter is required
        section:
          type: string
          description: Section where this app should be displayed. Apps with the same
            section name will be grouped together
        type:
          type: string
          description: 'Type of the parameter. Can be one of: string, multiline, boolean,
            enum and password'
        validation:
          type: string
          description: Validation regex that if matched will allow the input
        variable:
          type: string
          description: Variable is the path of the variable. Can be foo or foo.bar
            for nested objects.
    com.github.loft-sh.api.pkg.apis.storage.v1.ApplyTask:
      type: object
      properties:
        args:
          type: array
          description: Args are extra arguments used to apply the manifests
          items:
            type: string
        manifests:
          type: string
          description: Manifests are the manifests to apply
    com.github.loft-sh.api.pkg.apis.storage.v1.Cluster:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.ClusterSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.ClusterStatus'
      description: Cluster holds the cluster information
    com.github.loft-sh.api.pkg.apis.storage.v1.ClusterAccountTemplateClusterStatus:
      type: object
      properties:
        message:
          type: string
          description: Message describes why loft couldn't sync the account in human
            language
        name:
          type: string
          description: Name of the cluster where the cluster account template was
            applied
        phase:
          type: string
          description: Status holds the status of the account in the target cluster
        reason:
          type: string
          description: Reason describes why loft couldn't sync the account with a
            machine readable identifier
    com.github.loft-sh.api.pkg.apis.storage.v1.ClusterSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        config:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.SecretRef'
        description:
          type: string
          description: Description describes a cluster access object
        displayName:
          type: string
          description: If specified this name is displayed in the UI instead of the
            metadata name
        local:
          type: boolean
          description: Local specifies if it is the local cluster that should be connected,
            when this is specified, config is optional
        managementNamespace:
          type: string
          description: The namespace where the cluster components will be installed
            in
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
      description: ClusterSpec holds the cluster specification
    com.github.loft-sh.api.pkg.apis.storage.v1.ClusterStatus:
      type: object
      properties:
        message:
          type: string
        phase:
          type: string
        reason:
          type: string
      description: ClusterStatus holds the user status
    com.github.loft-sh.api.pkg.apis.storage.v1.GroupResources:
      type: object
      properties:
        group:
          type: string
          description: Group is the name of the API group that contains the resources.
            The empty string represents the core API group.
        resourceNames:
          type: array
          description: ResourceNames is a list of resource instance names that the
            policy matches. Using this field requires Resources to be specified. An
            empty list implies that every instance of the resource is matched.
          items:
            type: string
        resources:
          type: array
          description: |-
            Resources is a list of resources this rule applies to.

            For example: 'pods' matches pods. 'pods/log' matches the log subresource of pods. '*' matches all resources and their subresources. 'pods/*' matches all subresources of pods. '*/scale' matches all scale subresources.

            If wildcard is present, the validation rule will ensure resources do not overlap with each other.

            An empty list implies all resources and subresources in this API groups apply.
          items:
            type: string
      description: GroupResources represents resource kinds in an API group.
    com.github.loft-sh.api.pkg.apis.storage.v1.HelmChart:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Metadata'
        repository:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.HelmChartRepository'
        versions:
          type: array
          description: Versions holds all chart versions
          items:
            type: string
    com.github.loft-sh.api.pkg.apis.storage.v1.HelmChartRepository:
      type: object
      properties:
        insecure:
          type: boolean
          description: Insecure specifies if the chart should be retrieved without
            TLS verification
        name:
          type: string
          description: Name is the name of the repository
        password:
          type: string
          description: Password of the repository
        url:
          type: string
          description: URL is the repository url
        username:
          type: string
          description: Username of the repository
    com.github.loft-sh.api.pkg.apis.storage.v1.HelmConfiguration:
      required:
      - name
      type: object
      properties:
        insecure:
          type: boolean
          description: Determines if the remote location uses an insecure TLS certificate.
        name:
          type: string
          description: Name of the chart to deploy
        password:
          type: string
          description: The password to use for the selected repository
        repoUrl:
          type: string
          description: The repo url to use
        username:
          type: string
          description: The username to use for the selected repository
        values:
          type: string
          description: The additional helm values to use. Expected block string
        version:
          type: string
          description: Version is the version of the chart to deploy
      description: HelmConfiguration holds the helm configuration
    com.github.loft-sh.api.pkg.apis.storage.v1.HelmTask:
      type: object
      properties:
        args:
          type: array
          description: Args are extra args to pass to helm
          items:
            type: string
        release:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.HelmTaskRelease'
        rollbackRevision:
          type: string
          description: RollbackRevision is the revision to rollback to
        streamContainer:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.StreamContainer'
        type:
          type: string
          description: Type is the task type. Defaults to Upgrade
    com.github.loft-sh.api.pkg.apis.storage.v1.HelmTaskRelease:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.HelmReleaseSpec'
        labels:
          type: object
          additionalProperties:
            type: string
          description: Labels are additional labels for the helm release.
        name:
          type: string
          description: Name is the name of the release
        namespace:
          type: string
          description: Namespace of the release, if empty will use the target namespace
    com.github.loft-sh.api.pkg.apis.storage.v1.KindSecretRef:
      type: object
      properties:
        apiGroup:
          type: string
          description: APIGroup is the api group of the secret
        key:
          type: string
        kind:
          type: string
          description: Kind is the kind of the secret
        secretName:
          type: string
        secretNamespace:
          type: string
      description: KindSecretRef is the reference to a secret containing the user
        password
    com.github.loft-sh.api.pkg.apis.storage.v1.LocalClusterAccessTemplate:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterAccessSpec'
    com.github.loft-sh.api.pkg.apis.storage.v1.LocalClusterRoleTemplate:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalClusterRoleTemplateSpec'
    com.github.loft-sh.api.pkg.apis.storage.v1.LocalSpaceConstraintTemplate:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.LocalSpaceConstraintSpec'
    com.github.loft-sh.api.pkg.apis.storage.v1.SecretRef:
      type: object
      properties:
        key:
          type: string
        secretName:
          type: string
        secretNamespace:
          type: string
      description: SecretRef is the reference to a secret containing the user password
    com.github.loft-sh.api.pkg.apis.storage.v1.SpaceAppReference:
      type: object
      properties:
        name:
          type: string
          description: Name of the target app
        releaseName:
          type: string
          description: ReleaseName of the target app
    com.github.loft-sh.api.pkg.apis.storage.v1.SpaceCreationAppReference:
      type: object
      properties:
        name:
          type: string
          description: Name of the target app
        parameters:
          type: string
          description: Parameters are additional helm values that are merged with
            the original helm values.
        releaseName:
          type: string
          description: ReleaseName of the target app
    com.github.loft-sh.api.pkg.apis.storage.v1.SpaceCreationTask:
      type: object
      properties:
        apps:
          type: array
          description: Apps specifies the apps that should get deployed by this template
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.SpaceCreationAppReference'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
    com.github.loft-sh.api.pkg.apis.storage.v1.SpaceTemplateDefinition:
      type: object
      properties:
        apps:
          type: array
          description: Apps specifies the apps that should get deployed by this template
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.SpaceAppReference'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
    com.github.loft-sh.api.pkg.apis.storage.v1.StreamContainer:
      type: object
      properties:
        container:
          type: string
          description: Container is the container name to use
        selector:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
    com.github.loft-sh.api.pkg.apis.storage.v1.Target:
      type: object
      properties:
        cluster:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.TargetCluster'
        virtualCluster:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.TargetVirtualCluster'
    com.github.loft-sh.api.pkg.apis.storage.v1.TargetCluster:
      type: object
      properties:
        cluster:
          type: string
          description: Cluster is the cluster where the task should get executed
        namespace:
          type: string
          description: Namespace is the namespace where the task should get executed
    com.github.loft-sh.api.pkg.apis.storage.v1.TargetVirtualCluster:
      type: object
      properties:
        cluster:
          type: string
          description: Cluster is the cluster where the virtual cluster lies
        name:
          type: string
          description: Name of the virtual cluster
        namespace:
          type: string
          description: Namespace is the namespace where the virtual cluster is located
    com.github.loft-sh.api.pkg.apis.storage.v1.TaskDefinition:
      type: object
      properties:
        apply:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.ApplyTask'
        helm:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.HelmTask'
        spaceCreation:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.SpaceCreationTask'
        virtualClusterCreation:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterCreationTask'
    com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplate:
      type: object
      properties:
        accountName:
          type: string
          description: AccountName is the name of the account that should be created.
            Defaults to the user or team kubernetes name.
        name:
          type: string
          description: Name of the cluster account template to apply
        sync:
          type: boolean
          description: Sync defines if Loft should sync changes to the cluster account
            template to the cluster accounts and create new accounts if new clusters
            match the templates.
    com.github.loft-sh.api.pkg.apis.storage.v1.UserClusterAccountTemplateStatus:
      type: object
      properties:
        clusters:
          type: array
          description: Clusters holds the cluster on which this template was applied
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.ClusterAccountTemplateClusterStatus'
        message:
          type: string
          description: Message describes why loft couldn't sync the account in human
            language
        name:
          type: string
          description: Name of the cluster account template that was applied
        phase:
          type: string
          description: Status holds the status of the account in the target cluster
        reason:
          type: string
          description: Reason describes why loft couldn't sync the account with a
            machine readable identifier
    com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam:
      type: object
      properties:
        team:
          type: string
        user:
          type: string
    com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterAppReference:
      type: object
      properties:
        name:
          type: string
          description: Name of the target app
        namespace:
          type: string
          description: Namespace specifies in which target namespace the app should
            get deployed in
        releaseName:
          type: string
          description: ReleaseName is the name of the app release
    com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterCreationAppReference:
      type: object
      properties:
        name:
          type: string
          description: Name of the target app
        namespace:
          type: string
          description: Namespace specifies in which target namespace the app should
            get deployed in
        parameters:
          type: string
          description: Parameters are additional helm chart values that will get merged
            with config and are then used to deploy the helm chart.
        releaseName:
          type: string
          description: ReleaseName is the name of the app release
    com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterCreationTask:
      type: object
      properties:
        apps:
          type: array
          description: Apps specifies the apps that should get deployed by this template
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterCreationAppReference'
        helmRelease:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spaceCreation:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.SpaceCreationTask'
        wait:
          type: boolean
          description: Wait defines if the task should wait until the virtual cluster
            is ready
    com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplate:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplateSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplateStatus'
      description: VirtualClusterTemplate holds the virtualClusterTemplate information
    com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplateDefinition:
      type: object
      properties:
        apps:
          type: array
          description: Apps specifies the apps that should get deployed by this template
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterAppReference'
        helmRelease:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
    com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplateSpaceTemplateRef:
      type: object
      properties:
        name:
          type: string
          description: Name of the space template
    com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplateSpec:
      type: object
      properties:
        access:
          type: array
          description: Access holds the access rights for users and teams
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.Access'
        description:
          type: string
          description: Description describes the virtual cluster template
        displayName:
          type: string
          description: DisplayName is the name that is shown in the UI
        owner:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.UserOrTeam'
        spaceTemplateRef:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplateSpaceTemplateRef'
        template:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplateDefinition'
      description: VirtualClusterTemplateSpec holds the specification
    com.github.loft-sh.api.pkg.apis.storage.v1.VirtualClusterTemplateStatus:
      type: object
      description: VirtualClusterTemplateStatus holds the status
    com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmRelease:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmReleaseSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmReleaseStatus'
      x-kubernetes-group-version-kind:
      - group: virtualcluster.loft.sh
        kind: HelmRelease
        version: v1
    com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmReleaseList:
      required:
      - items
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        items:
          type: array
          items:
            $ref: '#/components/schemas/com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmRelease'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      x-kubernetes-group-version-kind:
      - group: virtualcluster.loft.sh
        kind: HelmReleaseList
        version: v1
    com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmReleaseSpec:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
          description: Annotations are extra annotations for this helm release
        chart:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Chart'
        manifests:
          type: string
          description: Manifests holds kube manifests that will be deployed as a chart
        parameters:
          type: string
          description: Parameters are additional helm chart values that will get merged
            with config and are then used to deploy the helm chart.
        values:
          type: string
          description: Values is the set of extra Values added to the chart. These
            values merge with the default values inside of the chart. You can use
            golang templating in here with values from parameters.
    com.github.loft-sh.api.pkg.apis.virtualcluster.v1.HelmReleaseStatus:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Info'
        metadata:
          $ref: '#/components/schemas/com.github.loft-sh.agentapi.pkg.apis.loft.cluster.v1.Metadata'
        version:
          type: integer
          description: Revision is an int which represents the revision of the release.
          format: int32
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicy:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicySpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyStatus'
      description: JsPolicy holds the webhook configuration
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundle:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleStatus'
      description: JsPolicyBundle holds the bundled payload
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleSpec:
      type: object
      properties:
        bundle:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: Bundle holds the bundled payload (including dependencies and
            minified javascript code)
          format: byte
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleStatus:
      type: object
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicySpec:
      type: object
      properties:
        apiGroups:
          type: array
          description: APIGroups is the API groups the resources belong to. '*' is
            all groups. If '*' is present, the length of the slice must be one.
          items:
            type: string
        apiVersions:
          type: array
          description: APIVersions is the API versions the resources belong to. '*'
            is all versions. If '*' is present, the length of the slice must be one.
          items:
            type: string
        auditLogSize:
          type: integer
          description: AuditLogSize defines how many violations should be logged in
            the status. Defaults to 10
          format: int32
        auditPolicy:
          type: string
          description: AuditPolicy defines if violations should be logged to the webhook
            status or not. By default, violations will be logged to the CRD status.
        dependencies:
          type: object
          additionalProperties:
            type: string
          description: Dependencies is a map of npm modules this webhook should be
            bundled with
        failurePolicy:
          type: string
          description: FailurePolicy defines how unrecognized errors from the admission
            endpoint are handled - allowed values are Ignore or Fail. Defaults to
            Fail.
        javascript:
          type: string
          description: JavaScript is the payload of the webhook that will be executed.
            If this is not defined, jsPolicy expects the user to create a JsPolicyBundle
            for this policy.
        matchPolicy:
          type: string
          description: |-
            matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".

            - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.

            - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.

            Defaults to "Equivalent"
        namespaceSelector:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        objectSelector:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        operations:
          type: array
          description: Operations is the operations the admission hook cares about
            - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and
            any future admission operations that are added. If '*' is present, the
            length of the slice must be one. Required.
          items:
            type: string
        resources:
          type: array
          description: |-
            Resources is a list of resources this rule applies to.

            For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.

            If wildcard is present, the validation rule will ensure resources do not overlap with each other.

            Depending on the enclosing object, subresources might not be allowed. Required.
          items:
            type: string
        scope:
          type: string
          description: scope specifies the scope of this rule. Valid values are "Cluster",
            "Namespaced", and "*" "Cluster" means that only cluster-scoped resources
            will match this rule. Namespace API objects are cluster-scoped. "Namespaced"
            means that only namespaced resources will match this rule. "*" means that
            there are no scope restrictions. Subresources match the scope of their
            parent resource. Default is "*".
        timeoutSeconds:
          type: integer
          description: TimeoutSeconds specifies the timeout for this webhook. After
            the timeout passes, the webhook call will be ignored or the API call will
            fail based on the failure policy. The timeout value must be between 1
            and 30 seconds. Default to 10 seconds.
          format: int32
        type:
          type: string
          description: Type defines what kind of policy the object represents. Valid
            values are Validating, Mutating and Controller. Defaults to Validating.
        violationPolicy:
          type: string
          description: Violation policy describes how violations should be handled.
            You can either specify deny (which is the default), warn or dry.
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyStatus:
      type: object
      properties:
        bundleHash:
          type: string
          description: BundleHash is used to determine if we have to re-bundle the
            javascript
        message:
          type: string
          description: Message describes the error in human readable language if the
            webhook is in a failed state
        phase:
          type: string
          description: Phase describes how the syncing status of the webhook is
        reason:
          type: string
          description: Reason holds the error in machine readable language if the
            webhook is in a failed state
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolations:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsSpec'
        status:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsStatus'
      description: JsPolicyViolations holds the webhook configuration
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsSpec:
      type: object
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsStatus:
      type: object
      properties:
        violations:
          type: array
          description: Violations is an array of violations that were recorded by
            the webhook
          items:
            $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.PolicyViolation'
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.PolicyViolation:
      type: object
      properties:
        action:
          type: string
          description: Action holds the the action type the webhook reacted with
        code:
          type: integer
          description: Code is the error code that was returned to the client
          format: int32
        message:
          type: string
          description: Message holds the message that was sent to the client
        reason:
          type: string
          description: Reason is the error reason that was returned to the client
        requestInfo:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.RequestInfo'
        timestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        userInfo:
          $ref: '#/components/schemas/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.UserInfo'
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.RequestInfo:
      type: object
      properties:
        apiVersion:
          type: string
          description: Kind is the type of object being submitted (for example, Pod
            or Deployment)
        kind:
          type: string
          description: Kind is the type of object being submitted (for example, Pod
            or Deployment)
        name:
          type: string
          description: Name is the name of the object as presented in the request.
            On a CREATE operation, the client may omit name and rely on the server
            to generate the name. If that is the case, this field will contain an
            empty string.
        namespace:
          type: string
          description: Namespace is the namespace associated with the request (if
            any).
        operation:
          type: string
          description: Operation is the operation being performed. This may be different
            than the operation requested. e.g. a patch can result in either a CREATE
            or UPDATE Operation.
    com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.UserInfo:
      type: object
      properties:
        uid:
          type: string
          description: A unique value that identifies this user across time. If this
            user is deleted and another user by the same name is added, they will
            have different UIDs.
        username:
          type: string
          description: The name that uniquely identifies this user among all active
            users.
    io.k8s.api.authentication.v1.UserInfo:
      type: object
      properties:
        extra:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Any additional information provided by the authenticator.
        groups:
          type: array
          description: The names of groups this user is a part of.
          items:
            type: string
        uid:
          type: string
          description: A unique value that identifies this user across time. If this
            user is deleted and another user by the same name is added, they will
            have different UIDs.
        username:
          type: string
          description: The name that uniquely identifies this user among all active
            users.
      description: UserInfo holds the information about the user needed to implement
        the user.Info interface.
    io.k8s.api.authorization.v1.NonResourceAttributes:
      type: object
      properties:
        path:
          type: string
          description: Path is the URL path of the request
        verb:
          type: string
          description: Verb is the standard HTTP verb
      description: NonResourceAttributes includes the authorization attributes available
        for non-resource requests to the Authorizer interface
    io.k8s.api.authorization.v1.ResourceAttributes:
      type: object
      properties:
        group:
          type: string
          description: Group is the API Group of the Resource.  "*" means all.
        name:
          type: string
          description: Name is the name of the resource being requested for a "get"
            or deleted for a "delete". "" (empty) means all.
        namespace:
          type: string
          description: Namespace is the namespace of the action being requested.  Currently,
            there is no distinction between no namespace and all namespaces "" (empty)
            is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped
            resources "" (empty) means "all" for namespace scoped resources from a
            SubjectAccessReview or SelfSubjectAccessReview
        resource:
          type: string
          description: Resource is one of the existing resource types.  "*" means
            all.
        subresource:
          type: string
          description: Subresource is one of the existing resource types.  "" means
            none.
        verb:
          type: string
          description: 'Verb is a kubernetes resource API verb, like: get, list, watch,
            create, update, delete, proxy.  "*" means all.'
        version:
          type: string
          description: Version is the API Version of the Resource.  "*" means all.
      description: ResourceAttributes includes the authorization attributes available
        for resource requests to the Authorizer interface
    io.k8s.api.core.v1.ContainerState:
      type: object
      properties:
        running:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStateRunning'
        terminated:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStateTerminated'
        waiting:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStateWaiting'
      description: ContainerState holds a possible state of container. Only one of
        its members may be specified. If none of them is specified, the default one
        is ContainerStateWaiting.
    io.k8s.api.core.v1.ContainerStateRunning:
      type: object
      properties:
        startedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description: ContainerStateRunning is a running state of a container.
    io.k8s.api.core.v1.ContainerStateTerminated:
      required:
      - exitCode
      type: object
      properties:
        containerID:
          type: string
          description: Container's ID in the format 'docker://<container_id>'
        exitCode:
          type: integer
          description: Exit status from the last termination of the container
          format: int32
        finishedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        message:
          type: string
          description: Message regarding the last termination of the container
        reason:
          type: string
          description: (brief) reason from the last termination of the container
        signal:
          type: integer
          description: Signal from the last termination of the container
          format: int32
        startedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description: ContainerStateTerminated is a terminated state of a container.
    io.k8s.api.core.v1.ContainerStateWaiting:
      type: object
      properties:
        message:
          type: string
          description: Message regarding why the container is not yet running.
        reason:
          type: string
          description: (brief) reason the container is not yet running.
      description: ContainerStateWaiting is a waiting state of a container.
    io.k8s.api.core.v1.ContainerStatus:
      required:
      - image
      - imageID
      - name
      - ready
      - restartCount
      type: object
      properties:
        containerID:
          type: string
          description: Container's ID in the format 'docker://<container_id>'.
        image:
          type: string
          description: 'The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images'
        imageID:
          type: string
          description: ImageID of the container's image.
        lastState:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerState'
        name:
          type: string
          description: This must be a DNS_LABEL. Each container in a pod must have
            a unique name. Cannot be updated.
        ready:
          type: boolean
          description: Specifies whether the container has passed its readiness probe.
        restartCount:
          type: integer
          description: The number of times the container has been restarted, currently
            based on the number of dead containers that have not yet been removed.
            Note that this is calculated from dead containers. But those containers
            are subject to garbage collection. This value will get capped at 5 by
            GC.
          format: int32
        started:
          type: boolean
          description: Specifies whether the container has passed its startup probe.
            Initialized as false, becomes true after startupProbe is considered successful.
            Resets to false when the container is restarted, or if kubelet loses state
            temporarily. Is always true when no startupProbe is defined.
        state:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerState'
      description: ContainerStatus contains details for the current status of this
        container.
    io.k8s.api.core.v1.ResourceQuotaSpec:
      type: object
      properties:
        hard:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: 'hard is the set of desired hard limits for each named resource.
            More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
        scopeSelector:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ScopeSelector'
        scopes:
          type: array
          description: A collection of filters that must match each object tracked
            by a quota. If not specified, the quota matches all objects.
          items:
            type: string
      description: ResourceQuotaSpec defines the desired hard limits to enforce for
        Quota.
    io.k8s.api.core.v1.ResourceQuotaStatus:
      type: object
      properties:
        hard:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: 'Hard is the set of enforced hard limits for each named resource.
            More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
        used:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: Used is the current observed total usage of the resource in
            the namespace.
      description: ResourceQuotaStatus defines the enforced hard limits and observed
        use.
    io.k8s.api.core.v1.ScopeSelector:
      type: object
      properties:
        matchExpressions:
          type: array
          description: A list of scope selector requirements by scope of the resources.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ScopedResourceSelectorRequirement'
      description: A scope selector represents the AND of the selectors represented
        by the scoped-resource selector requirements.
    io.k8s.api.core.v1.ScopedResourceSelectorRequirement:
      required:
      - operator
      - scopeName
      type: object
      properties:
        operator:
          type: string
          description: Represents a scope's relationship to a set of values. Valid
            operators are In, NotIn, Exists, DoesNotExist.
        scopeName:
          type: string
          description: The name of the scope that the selector applies to.
        values:
          type: array
          description: An array of string values. If the operator is In or NotIn,
            the values array must be non-empty. If the operator is Exists or DoesNotExist,
            the values array must be empty. This array is replaced during a strategic
            merge patch.
          items:
            type: string
      description: A scoped-resource selector requirement is a selector that contains
        values, a scope name, and an operator that relates the scope name and values.
    io.k8s.api.rbac.v1.AggregationRule:
      type: object
      properties:
        clusterRoleSelectors:
          type: array
          description: ClusterRoleSelectors holds a list of selectors which will be
            used to find ClusterRoles and create the rules. If any of the selectors
            match, then the ClusterRole's permissions will be added
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
      description: AggregationRule describes how to locate ClusterRoles to aggregate
        into the ClusterRole
    io.k8s.api.rbac.v1.PolicyRule:
      required:
      - verbs
      type: object
      properties:
        apiGroups:
          type: array
          description: APIGroups is the name of the APIGroup that contains the resources.  If
            multiple API groups are specified, any action requested against one of
            the enumerated resources in any API group will be allowed.
          items:
            type: string
        nonResourceURLs:
          type: array
          description: NonResourceURLs is a set of partial urls that a user should
            have access to.  *s are allowed, but only as the full, final step in the
            path Since non-resource URLs are not namespaced, this field is only applicable
            for ClusterRoles referenced from a ClusterRoleBinding. Rules can either
            apply to API resources (such as "pods" or "secrets") or non-resource URL
            paths (such as "/api"),  but not both.
          items:
            type: string
        resourceNames:
          type: array
          description: ResourceNames is an optional white list of names that the rule
            applies to.  An empty set means that everything is allowed.
          items:
            type: string
        resources:
          type: array
          description: Resources is a list of resources this rule applies to.  ResourceAll
            represents all resources.
          items:
            type: string
        verbs:
          type: array
          description: Verbs is a list of Verbs that apply to ALL the ResourceKinds
            and AttributeRestrictions contained in this rule.  VerbAll represents
            all kinds.
          items:
            type: string
      description: PolicyRule holds information that describes a policy rule, but
        does not contain information about who the rule applies to or which namespace
        the rule applies to.
    io.k8s.api.rbac.v1.Subject:
      required:
      - kind
      - name
      type: object
      properties:
        apiGroup:
          type: string
          description: APIGroup holds the API group of the referenced subject. Defaults
            to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io"
            for User and Group subjects.
        kind:
          type: string
          description: Kind of object being referenced. Values defined by this API
            group are "User", "Group", and "ServiceAccount". If the Authorizer does
            not recognized the kind value, the Authorizer should report an error.
        name:
          type: string
          description: Name of the object being referenced.
        namespace:
          type: string
          description: Namespace of the referenced object.  If the object kind is
            non-namespace, such as "User" or "Group", and this value is not empty
            the Authorizer should report an error.
      description: Subject contains a reference to the object or user identities a
        role binding applies to.  This can either hold a direct API object reference,
        or a value for non-objects such as user and group names.
    io.k8s.apimachinery.pkg.api.resource.Quantity:
      type: string
      description: |-
        Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

        The serialization format is:

        <quantity>        ::= <signedNumber><suffix>
          (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
        <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
          (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
        <decimalSI>       ::= m | "" | k | M | G | T | P | E
          (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
        <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

        No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

        When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

        Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
          a. No precision is lost
          b. No fractional digits will be emitted
          c. The exponent (or suffix) is as large as possible.
        The sign will be omitted unless the number is negative.

        Examples:
          1.5 will be serialized as "1500m"
          1.5Gi will be serialized as "1536Mi"

        Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

        Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

        This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
    io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup:
      required:
      - name
      - versions
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        name:
          type: string
          description: name is the name of the group.
        preferredVersion:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery'
        serverAddressByClientCIDRs:
          type: array
          description: 'a map of client CIDR to server address that is serving this
            group. This is to help clients reach servers in the most network-efficient
            way possible. Clients can use the appropriate server address as per the
            CIDR that they match. In case of multiple matches, clients should use
            the longest matching CIDR. The server returns only those CIDRs that it
            thinks that the client can match. For example: the master will return
            an internal IP CIDR only, if the client reaches the server using an internal
            IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr
            (in that order) to get the client IP.'
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR'
        versions:
          type: array
          description: versions are the versions supported in this group.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery'
      description: APIGroup contains the name, the supported versions, and the preferred
        version of a group.
      x-kubernetes-group-version-kind:
      - group: ""
        kind: APIGroup
        version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList:
      required:
      - groups
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        groups:
          type: array
          description: groups is a list of APIGroup.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      description: APIGroupList is a list of APIGroup, to allow clients to discover
        the API at /apis.
      x-kubernetes-group-version-kind:
      - group: ""
        kind: APIGroupList
        version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.APIResource:
      required:
      - kind
      - name
      - namespaced
      - singularName
      - verbs
      type: object
      properties:
        categories:
          type: array
          description: categories is a list of the grouped resources this resource
            belongs to (e.g. 'all')
          items:
            type: string
        group:
          type: string
          description: 'group is the preferred group of the resource.  Empty implies
            the group of the containing resource list. For subresources, this may
            have a different value, for example: Scale".'
        kind:
          type: string
          description: kind is the kind for the resource (e.g. 'Foo' is the kind for
            a resource 'foo')
        name:
          type: string
          description: name is the plural name of the resource.
        namespaced:
          type: boolean
          description: namespaced indicates if a resource is namespaced or not.
        shortNames:
          type: array
          description: shortNames is a list of suggested short names of the resource.
          items:
            type: string
        singularName:
          type: string
          description: singularName is the singular name of the resource.  This allows
            clients to handle plural and singular opaquely. The singularName is more
            correct for reporting status on a single item and both singular and plural
            are allowed from the kubectl CLI interface.
        storageVersionHash:
          type: string
          description: The hash value of the storage version, the version this resource
            is converted to when written to the data store. Value must be treated
            as opaque by clients. Only equality comparison on the value is valid.
            This is an alpha feature and may change or be removed in the future. The
            field is populated by the apiserver only if the StorageVersionHash feature
            gate is enabled. This field will remain optional even if it graduates.
        verbs:
          type: array
          description: verbs is a list of supported kube verbs (this includes get,
            list, watch, create, update, patch, delete, deletecollection, and proxy)
          items:
            type: string
        version:
          type: string
          description: 'version is the preferred version of the resource.  Empty implies
            the version of the containing resource list For subresources, this may
            have a different value, for example: v1 (while inside a v1beta1 version
            of the core resource''s group)".'
      description: APIResource specifies the name of a resource and whether it is
        namespaced.
    io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList:
      required:
      - groupVersion
      - resources
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        groupVersion:
          type: string
          description: groupVersion is the group and version this APIResourceList
            is for.
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        resources:
          type: array
          description: resources contains the name of the resources and if they are
            namespaced.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource'
      description: APIResourceList is a list of APIResource, it is used to expose
        the name of the resources supported in a specific group and version, and if
        the resource is namespaced.
      x-kubernetes-group-version-kind:
      - group: ""
        kind: APIResourceList
        version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        dryRun:
          type: array
          description: 'When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error response
            and no further processing of the request. Valid values are: - All: all
            dry run stages will be processed'
          items:
            type: string
        gracePeriodSeconds:
          type: integer
          description: The duration in seconds before the object should be deleted.
            Value must be non-negative integer. The value zero indicates delete immediately.
            If this value is nil, the default grace period for the specified type
            will be used. Defaults to a per object value if not specified. zero means
            delete immediately.
          format: int64
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        orphanDependents:
          type: boolean
          description: 'Deprecated: please use the PropagationPolicy, this field will
            be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
            the "orphan" finalizer will be added to/removed from the object''s finalizers
            list. Either this field or PropagationPolicy may be set, but not both.'
        preconditions:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions'
        propagationPolicy:
          type: string
          description: 'Whether and how garbage collection will be performed. Either
            this field or OrphanDependents may be set, but not both. The default policy
            is decided by the existing finalizer set in the metadata.finalizers and
            the resource-specific default policy. Acceptable values are: ''Orphan''
            - orphan the dependents; ''Background'' - allow the garbage collector
            to delete the dependents in the background; ''Foreground'' - a cascading
            policy that deletes all dependents in the foreground.'
      description: DeleteOptions may be provided when deleting an API object.
      x-kubernetes-group-version-kind:
      - group: management.loft.sh
        kind: DeleteOptions
        version: v1
      - group: virtualcluster.loft.sh
        kind: DeleteOptions
        version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1:
      type: object
      description: |-
        FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

        Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

        The exact format is defined in sigs.k8s.io/structured-merge-diff
    io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery:
      required:
      - groupVersion
      - version
      type: object
      properties:
        groupVersion:
          type: string
          description: groupVersion specifies the API group and version in the form
            "group/version"
        version:
          type: string
          description: version specifies the version in the form of "version". This
            is to save the clients the trouble of splitting the GroupVersion.
      description: GroupVersion contains the "group/version" and "version" string
        of a version. It is made a struct to keep extensibility.
    io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector:
      type: object
      properties:
        matchExpressions:
          type: array
          description: matchExpressions is a list of label selector requirements.
            The requirements are ANDed.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement'
        matchLabels:
          type: object
          additionalProperties:
            type: string
          description: matchLabels is a map of {key,value} pairs. A single {key,value}
            in the matchLabels map is equivalent to an element of matchExpressions,
            whose key field is "key", the operator is "In", and the values array contains
            only "value". The requirements are ANDed.
      description: A label selector is a label query over a set of resources. The
        result of matchLabels and matchExpressions are ANDed. An empty label selector
        matches all objects. A null label selector matches no objects.
    io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement:
      required:
      - key
      - operator
      type: object
      properties:
        key:
          type: string
          description: key is the label key that the selector applies to.
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: key
        operator:
          type: string
          description: operator represents a key's relationship to a set of values.
            Valid operators are In, NotIn, Exists and DoesNotExist.
        values:
          type: array
          description: values is an array of string values. If the operator is In
            or NotIn, the values array must be non-empty. If the operator is Exists
            or DoesNotExist, the values array must be empty. This array is replaced
            during a strategic merge patch.
          items:
            type: string
      description: A label selector requirement is a selector that contains values,
        a key, and an operator that relates the key and values.
    io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta:
      type: object
      properties:
        continue:
          type: string
          description: continue may be set if the user set a limit on the number of
            items returned, and indicates that the server has more data available.
            The value is opaque and may be used to issue another request to the endpoint
            that served this list to retrieve the next set of available objects. Continuing
            a consistent list may not be possible if the server configuration has
            changed or more than a few minutes have passed. The resourceVersion field
            returned when using this continue value will be identical to the value
            in the first response, unless you have received this token from an error
            message.
        remainingItemCount:
          type: integer
          description: remainingItemCount is the number of subsequent items in the
            list which are not included in this list response. If the list request
            contained label or field selectors, then the number of remaining items
            is unknown and the field will be left unset and omitted during serialization.
            If the list is complete (either because it is not chunking or because
            this is the last chunk), then there are no more remaining items and this
            field will be left unset and omitted during serialization. Servers older
            than v1.15 do not set this field. The intended use of the remainingItemCount
            is *estimating* the size of a collection. Clients should not rely on the
            remainingItemCount to be set or to be exact.
          format: int64
        resourceVersion:
          type: string
          description: 'String that identifies the server''s internal version of this
            object that can be used by clients to determine when objects have changed.
            Value must be treated as opaque by clients and passed unmodified back
            to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
        selfLink:
          type: string
          description: |-
            selfLink is a URL representing this object. Populated by the system. Read-only.

            DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
      description: ListMeta describes metadata that synthetic resources must have,
        including lists and various status objects. A resource may have only one of
        {ObjectMeta, ListMeta}.
    io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
      type: object
      properties:
        apiVersion:
          type: string
          description: APIVersion defines the version of this resource that this field
            set applies to. The format is "group/version" just like the top-level
            APIVersion field. It is necessary to track the version of a field set
            because it cannot be automatically converted.
        fieldsType:
          type: string
          description: 'FieldsType is the discriminator for the different fields format
            and version. There is currently only one possible value: "FieldsV1"'
        fieldsV1:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1'
        manager:
          type: string
          description: Manager is an identifier of the workflow managing these fields.
        operation:
          type: string
          description: Operation is the type of operation which lead to this ManagedFieldsEntry
            being created. The only valid values for this field are 'Apply' and 'Update'.
        time:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description: ManagedFieldsEntry is a workflow-id, a FieldSet and the group version
        of the resource that the fieldset applies to.
    io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime:
      type: string
      description: MicroTime is version of Time with microsecond level precision.
      format: date-time
    io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
          description: 'Annotations is an unstructured key value map stored with a
            resource that may be set by external tools to store and retrieve arbitrary
            metadata. They are not queryable and should be preserved when modifying
            objects. More info: http://kubernetes.io/docs/user-guide/annotations'
        clusterName:
          type: string
          description: The name of the cluster which the object belongs to. This is
            used to distinguish resources with same name and namespace in different
            clusters. This field is not set anywhere right now and apiserver is going
            to ignore it if set in create or update request.
        creationTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        deletionGracePeriodSeconds:
          type: integer
          description: Number of seconds allowed for this object to gracefully terminate
            before it will be removed from the system. Only set when deletionTimestamp
            is also set. May only be shortened. Read-only.
          format: int64
        deletionTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        finalizers:
          type: array
          description: Must be empty before the object is deleted from the registry.
            Each entry is an identifier for the responsible component that will remove
            the entry from the list. If the deletionTimestamp of the object is non-nil,
            entries in this list can only be removed. Finalizers may be processed
            and removed in any order.  Order is NOT enforced because it introduces
            significant risk of stuck finalizers. finalizers is a shared field, any
            actor with permission can reorder it. If the finalizer list is processed
            in order, then this can lead to a situation in which the component responsible
            for the first finalizer in the list is waiting for a signal (field value,
            external system, or other) produced by a component responsible for a finalizer
            later in the list, resulting in a deadlock. Without enforced ordering
            finalizers are free to order amongst themselves and are not vulnerable
            to ordering changes in the list.
          items:
            type: string
          x-kubernetes-patch-strategy: merge
        generateName:
          type: string
          description: |-
            GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

            If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).

            Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        generation:
          type: integer
          description: A sequence number representing a specific generation of the
            desired state. Populated by the system. Read-only.
          format: int64
        labels:
          type: object
          additionalProperties:
            type: string
          description: 'Map of string keys and values that can be used to organize
            and categorize (scope and select) objects. May match selectors of replication
            controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
        managedFields:
          type: array
          description: ManagedFields maps workflow-id and version to the set of fields
            that are managed by that workflow. This is mostly for internal housekeeping,
            and users typically shouldn't need to set or understand this field. A
            workflow can be the user's name, a controller's name, or the name of a
            specific apply path like "ci-cd". The set of fields is always in the version
            that the workflow used when modifying the object.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
        name:
          type: string
          description: 'Name must be unique within a namespace. Is required when creating
            resources, although some resources may allow a client to request the generation
            of an appropriate name automatically. Name is primarily intended for creation
            idempotence and configuration definition. Cannot be updated. More info:
            http://kubernetes.io/docs/user-guide/identifiers#names'
        namespace:
          type: string
          description: |-
            Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

            Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
        ownerReferences:
          type: array
          description: List of objects depended by this object. If ALL objects in
            the list have been deleted, this object will be garbage collected. If
            this object is managed by a controller, then an entry in this list will
            point to this controller, with the controller field set to true. There
            cannot be more than one managing controller.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
          x-kubernetes-patch-strategy: merge
          x-kubernetes-patch-merge-key: uid
        resourceVersion:
          type: string
          description: |-
            An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

            Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        selfLink:
          type: string
          description: |-
            SelfLink is a URL representing this object. Populated by the system. Read-only.

            DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        uid:
          type: string
          description: |-
            UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

            Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
      description: ObjectMeta is metadata that all persisted resources must have,
        which includes all objects users must create.
    io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference:
      required:
      - apiVersion
      - kind
      - name
      - uid
      type: object
      properties:
        apiVersion:
          type: string
          description: API version of the referent.
        blockOwnerDeletion:
          type: boolean
          description: If true, AND if the owner has the "foregroundDeletion" finalizer,
            then the owner cannot be deleted from the key-value store until this reference
            is removed. Defaults to false. To set this field, a user needs "delete"
            permission of the owner, otherwise 422 (Unprocessable Entity) will be
            returned.
        controller:
          type: boolean
          description: If true, this reference points to the managing controller.
        kind:
          type: string
          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        name:
          type: string
          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
        uid:
          type: string
          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
      description: OwnerReference contains enough information to let you identify
        an owning object. An owning object must be in the same namespace as the dependent,
        or be cluster-scoped, so there is no namespace field.
    io.k8s.apimachinery.pkg.apis.meta.v1.Patch:
      type: object
      description: Patch is provided to give a concrete name and type to the Kubernetes
        PATCH request body.
    io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions:
      type: object
      properties:
        resourceVersion:
          type: string
          description: Specifies the target ResourceVersion
        uid:
          type: string
          description: Specifies the target UID.
      description: Preconditions must be fulfilled before an operation (update, delete,
        etc.) is carried out.
    io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR:
      required:
      - clientCIDR
      - serverAddress
      type: object
      properties:
        clientCIDR:
          type: string
          description: The CIDR with which clients can match their IP to figure out
            the server address that they should use.
        serverAddress:
          type: string
          description: Address of this server, suitable for a client that matches
            the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
      description: ServerAddressByClientCIDR helps the client to determine the server
        address that they should use, depending on the clientCIDR that they match.
    io.k8s.apimachinery.pkg.apis.meta.v1.Status:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        code:
          type: integer
          description: Suggested HTTP return code for this status, 0 if not set.
          format: int32
        details:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        message:
          type: string
          description: A human-readable description of the status of this operation.
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        reason:
          type: string
          description: A machine-readable description of why this operation is in
            the "Failure" status. If this value is empty there is no information available.
            A Reason clarifies an HTTP status code but does not override it.
        status:
          type: string
          description: 'Status of the operation. One of: "Success" or "Failure". More
            info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
      description: Status is a return value for calls that don't return other objects.
      x-kubernetes-group-version-kind:
      - group: ""
        kind: Status
        version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause:
      type: object
      properties:
        field:
          type: string
          description: |-
            The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

            Examples:
              "name" - the field "name" on the current resource
              "items[0].name" - the field "name" on the first array entry in "items"
        message:
          type: string
          description: A human-readable description of the cause of the error.  This
            field may be presented as-is to a reader.
        reason:
          type: string
          description: A machine-readable description of the cause of the error. If
            this value is empty there is no information available.
      description: StatusCause provides more information about an api.Status failure,
        including cases when multiple errors are encountered.
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails:
      type: object
      properties:
        causes:
          type: array
          description: The Causes array includes more details associated with the
            StatusReason failure. Not all StatusReasons may provide detailed causes.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause'
        group:
          type: string
          description: The group attribute of the resource associated with the status
            StatusReason.
        kind:
          type: string
          description: 'The kind attribute of the resource associated with the status
            StatusReason. On some operations may differ from the requested resource
            Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        name:
          type: string
          description: The name attribute of the resource associated with the status
            StatusReason (when there is a single name which can be described).
        retryAfterSeconds:
          type: integer
          description: If specified, the time in seconds before the operation should
            be retried. Some errors may indicate the client must take an alternate
            action - for those errors this field may indicate how long to wait before
            taking the alternate action.
          format: int32
        uid:
          type: string
          description: 'UID of the resource. (when there is a single resource which
            can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
      description: StatusDetails is a set of additional properties that MAY be set
        by the server to provide additional information about a response. The Reason
        field of a Status object defines what attributes will be set. Clients must
        ignore fields that do not match the defined type of each attribute, and should
        assume that any attribute may be empty, invalid, or under defined.
    io.k8s.apimachinery.pkg.apis.meta.v1.Time:
      type: string
      description: Time is a wrapper around time.Time which supports correct marshaling
        to YAML and JSON.  Wrappers are provided for many of the factory methods that
        the time package offers.
      format: date-time
    io.k8s.apimachinery.pkg.runtime.RawExtension:
      type: object
      description: "RawExtension is used to hold extensions in external versions.\n\
        \nTo use this, make a field which has RawExtension as its type in your external,\
        \ versioned struct, and Object in your internal struct. You also need to register\
        \ your various plugin types.\n\n// Internal package: type MyAPIObject struct\
        \ {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"\
        myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n\
        }\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\"\
        ,inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA\
        \ struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the\
        \ JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"\
        apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"\
        aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or\
        \ yaml to unmarshal the serialized data into your external MyAPIObject. That\
        \ causes the raw JSON to be stored, but not unpacked. The next step is to\
        \ copy (using pkg/conversion) into the internal struct. The runtime package's\
        \ DefaultScheme has conversion functions installed which will unpack the JSON\
        \ stored in RawExtension, turning it into the correct object type, and storing\
        \ it in the Object. (TODO: In the case where the object is of an unknown type,\
        \ a runtime.Unknown object will be created and stored.)"
    io.k8s.apimachinery.pkg.runtime.Unknown:
      required:
      - ContentEncoding
      - ContentType
      - Raw
      type: object
      properties:
        ContentEncoding:
          type: string
          description: ContentEncoding is encoding used to encode 'Raw' data. Unspecified
            means no encoding.
        ContentType:
          type: string
          description: ContentType  is serialization method used to serialize 'Raw'.
            Unspecified means ContentTypeJSON.
        Raw:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: Raw will hold the complete serialized object which couldn't
            be matched with a registered type. Most likely, nothing should be done
            with this except for passing it through the system.
          format: byte
        apiVersion:
          type: string
        kind:
          type: string
      description: Unknown allows api objects with unknown types to be passed-through.
        This can be used to deal with the API objects from a plug-in. Unknown objects
        still have functioning TypeMeta features-- kind, version, etc. metadata and
        field mutatation.
